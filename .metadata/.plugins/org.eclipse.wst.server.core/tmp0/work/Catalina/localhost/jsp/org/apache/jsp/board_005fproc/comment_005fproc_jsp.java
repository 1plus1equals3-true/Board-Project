/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.109
 * Generated at: 2025-09-23 01:11:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fproc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.nio.file.*;
import java.sql.*;
import lib.DB;

public final class comment_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


response.setContentType("application/json"); // 응답 형식 JSON으로 설정
response.setHeader("Cache-Control", "no-cache"); // 캐시 방지
out.clear(); // 기존 버퍼 내용 지워 불필요한 공백 제거
request.setCharacterEncoding("utf-8");

String jsonResponse = "";
String login_id = "";
login_id = (String)session.getAttribute("ss_check");
String ip = java.net.Inet4Address.getLocalHost().getHostAddress();

	Date today = new Date(); // 현재 날짜와 시간 객체 생성
	SimpleDateFormat yearFormat = new SimpleDateFormat("yyyyMMdd"); // 년도 형식 지정
	String ymd = yearFormat.format(today); // 년도만 추출
	int intymd = Integer.parseInt(ymd);
	
	SimpleDateFormat filetimeFormat = new SimpleDateFormat("yyyyMMddHHmmss");
	String filetime = filetimeFormat.format(today);


String bidx = request.getParameter("bidx");
String commenttext = request.getParameter("commenttext");

if (login_id == null || bidx == null || commenttext == null || commenttext.trim().isEmpty()) {
    // 필수 정보 누락 시 실패 응답
    jsonResponse = "{\"success\": false, \"message\": \"로그인 또는 필수 입력값이 누락되었습니다.\"}";
} else {

String sql = "";
Connection conn=null;
Statement st = null;
ResultSet rs = null;
PreparedStatement ps = null;

	try {
		conn = DB.getConnection();
		
		sql = "insert into comment(bidx,uid,ment,regdate) " +
				   " values(?,?,?,now())";
		
		ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
		
	
		ps.setString(1, bidx);
		ps.setString(2, login_id);
		ps.setString(3, commenttext);
		
		int rows = ps.executeUpdate();
		
		if (rows > 0) {
            // 작성한 댓글의 cidx 가져오기
            String cidx = "";
            rs = ps.getGeneratedKeys();
            if (rs.next()) {
                cidx = rs.getString(1); // 첫 번째 컬럼(idx)의 값을 가져옴
            }
            
            String selectSql = "SELECT c.regdate, m.name as comname from comment c "
                             + "LEFT JOIN member m ON c.uid = m.uid "
                             + "WHERE c.idx = ?";
            
            ps.close(); // 이전 ps 닫기
            rs.close(); // 이전 rs 닫기
            
            ps = conn.prepareStatement(selectSql);
            ps.setString(1, cidx);
            rs = ps.executeQuery();
            
            String comname = "";
            String comdate = "";
            
            if(rs.next()){
                 comdate = rs.getString("regdate");
                 comname = rs.getString("comname");
            }

            String safe_commenttext = commenttext.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "");
            String safe_comname = comname.replace("\\", "\\\\").replace("\"", "\\\"");

            jsonResponse = String.format(
                "{\"success\": true, \"cidx\": \"%s\", \"comname\": \"%s\", \"ment\": \"%s\", \"comdate\": \"%s\", \"cuid\": \"%s\"}",
                cidx, 
                safe_comname,
                safe_commenttext,
                comdate,
                login_id
            );
        } else {
            jsonResponse = "{\"success\": false, \"message\": \"댓글 저장에 실패했습니다.\"}";
        }
		 
		 
	}catch(Exception e){ 
		System.err.println("댓글 작성 오류: " + e.getMessage());
        jsonResponse = "{\"success\": false, \"message\": \"데이터베이스 처리 중 오류가 발생했습니다.\"}";
	}finally {
	  	if (ps != null){
			   ps.close();
			}
	  	if(rs != null){
			   rs.close();
			}
		if (st != null){
			   st.close();
			}
		if (conn != null){
			   conn.close();
			}
	}
}
out.print(jsonResponse);
out.flush();

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
