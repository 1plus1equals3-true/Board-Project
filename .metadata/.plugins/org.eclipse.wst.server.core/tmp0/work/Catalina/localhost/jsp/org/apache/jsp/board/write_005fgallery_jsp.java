/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.109
 * Generated at: 2025-09-24 02:48:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import lib.DB;

public final class write_005fgallery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/board/op_bot.jsp", Long.valueOf(1758672612989L));
    _jspx_dependants.put("/board/op_logincheck.jsp", Long.valueOf(1758682039499L));
    _jspx_dependants.put("/board/op_top.jsp", Long.valueOf(1758674629396L));
    _jspx_dependants.put("/include/side_nav.jsp", Long.valueOf(1758674398612L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("lib.DB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>갤러리 글쓰기</title>\r\n");
      out.write("<style>\r\n");
      out.write("*{\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write(".write-form table {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    margin: 20px auto;\r\n");
      out.write("    max-width: 600px;\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    border: 1px solid #dee2e6;\r\n");
      out.write("    border-radius: 8px;\r\n");
      out.write("    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form td {\r\n");
      out.write("    padding: 15px;\r\n");
      out.write("    border: 1px solid #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form td:first-child {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    color: #495057;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    width: 120px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form input[type=\"text\"],\r\n");
      out.write(".write-form textarea {\r\n");
      out.write("    width: calc(100% - 24px);\r\n");
      out.write("    padding: 10px 12px;\r\n");
      out.write("    border: 1px solid #ced4da;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form textarea {\r\n");
      out.write("    height: 200px;\r\n");
      out.write("    resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form .button-container {\r\n");
      out.write("    text-align: right;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form input[type=\"submit\"],\r\n");
      out.write(".write-form .btn-cancel {\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("    margin-left: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form input[type=\"submit\"] {\r\n");
      out.write("    background-color: #007bff;\r\n");
      out.write("    color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form input[type=\"submit\"]:hover {\r\n");
      out.write("    background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form .btn-cancel {\r\n");
      out.write("    background-color: #6c757d;\r\n");
      out.write("    color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".write-form .btn-cancel:hover {\r\n");
      out.write("    background-color: #5a6268;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* a 태그 안에 button을 넣었을 때 스타일 */\r\n");
      out.write(".write-form a {\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("/* 전체 컨테이너 (div) 스타일 */\r\n");
      out.write(".file-container {\r\n");
      out.write("  /* 세로 정렬(column) 대신 가로 정렬(row)로 변경 */\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: row; \r\n");
      out.write("  align-items: center; /* 세로 중앙 정렬 */\r\n");
      out.write("  gap: 5px; /* 요소들 사이의 간격 */\r\n");
      out.write("\r\n");
      out.write("  /* 나머지 디자인 스타일은 그대로 유지 */\r\n");
      out.write("  padding: 3px;\r\n");
      out.write("  border-radius: 12px;\r\n");
      out.write("  background-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 파일 입력 필드 스타일 */\r\n");
      out.write(".file-container input[type=\"file\"] {\r\n");
      out.write("  /* 너비가 너무 넓어지지 않도록 조정 */\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  max-width: 350px; /* 적절한 너비로 조정하세요 */\r\n");
      out.write("  font-family: Arial, sans-serif;\r\n");
      out.write("  color: #555;\r\n");
      out.write("  border: 1px solid #BDBDBD;\r\n");
      out.write("  border-radius: 8px;\r\n");
      out.write("  padding: 10px 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 버튼 스타일 */\r\n");
      out.write(".file-container button {\r\n");
      out.write("  padding: 10px 18px;\r\n");
      out.write("  font-family: Arial, sans-serif;\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  color: #555;\r\n");
      out.write("  background-color: #E0E0E0;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 8px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  transition: background-color 0.3s ease;\r\n");
      out.write("  width: fit-content;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 호버 효과 */\r\n");
      out.write(".file-container button:hover {\r\n");
      out.write("  background-color: #BDBDBD;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String login_id = "";
login_id = (String)session.getAttribute("ss_check");
String login_idx = "";
String login_name = "";
String login_upfile = "";
int login_rank = -1;

if(login_id == null || login_id.equals("") || login_id.equals("null")) {
}else {
	String sqll = null;
	Connection connl =null;
	PreparedStatement psl = null;
	ResultSet rsl = null;
	
	try {
		
		connl = DB.getConnection();
		
		sqll = "SELECT * FROM member WHERE uid=?";
		psl = connl.prepareStatement(sqll);
		psl.setString(1, login_id);
		
		rsl = psl.executeQuery();
		rsl.next();
		
		login_idx = rsl.getString("idx");
		login_name = rsl.getString("name");
		login_upfile = rsl.getString("upfile");
		login_rank = rsl.getInt("member_rank");
		
	}catch (Exception e) {
		out.println(e.toString());
		out.println(sqll);
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".min-height {\r\n");
      out.write("	min-height: 80vh;\r\n");
      out.write("}\r\n");
      out.write("*{\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write(".board-header {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    border-bottom: 2px solid #e9ecef;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    min-height: 10vh;\r\n");
      out.write("    margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header h1 {\r\n");
      out.write("    font-size: 28px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header h1 a {\r\n");
      out.write("	font-size: 28px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header nav ul {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    gap: 50px;\r\n");
      out.write("    text-align: right;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header nav li a {\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    /*color: #495057;*/\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: 500;\r\n");
      out.write("    transition: color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("header img {\r\n");
      out.write("	width: 40px;\r\n");
      out.write("    height: 40px;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    border: 1px solid #ced4da;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-btn {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("    color: white;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write(".logout-btn:hover {\r\n");
      out.write("    background-color: #dc3545;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".mypage-btn {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("    color: white;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write(".mypage-btn:hover {\r\n");
      out.write("    background-color: #007bff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-info {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: 1px solid gray;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    color: black;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: 500;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
 if(login_id == null || login_id.equals("") || login_id.equals("null")) { 
      out.write("\r\n");
      out.write("<header class=\"board-header\">\r\n");
      out.write("    <h1><a href=\"../board_proc/main_proc.jsp\">게 시 판</a></h1>\r\n");
      out.write("    <nav>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><span class=\"user-info\">비로그인</span></li>\r\n");
      out.write("            <li> &nbsp; &nbsp; &nbsp; &nbsp; </li>\r\n");
      out.write("            <li><a href=\"../member/Join.jsp\" class=\"mypage-btn\">회원가입</a></li>\r\n");
      out.write("            <li><a href=\"../member/Login.jsp\" class=\"mypage-btn\">로그인</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("</header>\r\n");
 }else { 
      out.write("\r\n");
      out.write("<header class=\"board-header\">\r\n");
      out.write("    <h1><a href=\"../board_proc/main_proc.jsp\">게 시 판</a></h1>\r\n");
      out.write("    <nav>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><span class=\"user-info\">이름 : ");
      out.print( login_name );
      out.write("</span></li>\r\n");
      out.write("            ");
 if (login_upfile == null || login_upfile.equals("")) { 
      out.write("\r\n");
      out.write("            	<li> &nbsp; &nbsp; &nbsp; &nbsp; </li>\r\n");
      out.write("            ");
 }else { 
      out.write("\r\n");
      out.write("            	<li><img alt=\"X\" src=\"../member/Download.jsp?uid=");
      out.print( login_id );
      out.write("\"></li>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            <li><a href=\"../member/View.jsp?uid=");
      out.print( login_id );
      out.write("\" class=\"mypage-btn\">마이페이지</a></li>\r\n");
      out.write("            <li><a href=\"../member/Logout.jsp\" class=\"logout-btn\">로그아웃</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("</header>\r\n");
 } 
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

if(login_id == null || login_id.equals(""))
{

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("alert(\"권한 없음\");\r\n");
      out.write("history.back();\r\n");
      out.write("</script>\r\n");

	return;
}

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".side-nav {\r\n");
      out.write("  /* fixed 속성으로 뷰포트에 바로 고정 */\r\n");
      out.write("  position: fixed;\r\n");
      out.write("  /* 뷰포트 상단에서 20px 떨어진 곳에 고정 */\r\n");
      out.write("  top: 100px; \r\n");
      out.write("  /* 뷰포트 왼쪽에서 20px 떨어진 곳에 고정 */\r\n");
      out.write("  left: 10px;\r\n");
      out.write("  width: 80px;\r\n");
      out.write("  height: fit-content;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("  background-color: #f9f9f9;\r\n");
      out.write("  z-index: 10;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav h6 {\r\n");
      out.write("  margin-top: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav h4 {\r\n");
      out.write("  margin-top: 0;\r\n");
      out.write("  margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav ul {\r\n");
      out.write("  list-style-type: none;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav li {\r\n");
      out.write("  padding: 5px 0;\r\n");
      out.write("}\r\n");
      out.write(".side-nav a {\r\n");
      out.write("	color: black;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write(".side-nav a:hover {\r\n");
      out.write("	color: blue;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<div class=\"side-nav\">\r\n");
      out.write("	<h4>게시판</h4>\r\n");
      out.write("	<ul>\r\n");
      out.write("		<li><h6><a href=\"../board/list_notice.jsp\">공지사항</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_member.jsp\">회원 게시판</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_anonymity.jsp\">익명 게시판</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_gallery.jsp\">갤러리</a></h6></li>\r\n");
      out.write("	</ul>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const draggableDiv = document.querySelector('.side-nav');\r\n");
      out.write("    let isDragging = false;\r\n");
      out.write("    let offsetX, offsetY;\r\n");
      out.write("\r\n");
      out.write("    // 1. 페이지 로드 시 저장된 위치를 불러와 적용\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        // sessionStorage에서 위치 값 가져오기\r\n");
      out.write("        const savedTop = sessionStorage.getItem('sideNavTop');\r\n");
      out.write("        const savedLeft = sessionStorage.getItem('sideNavLeft');\r\n");
      out.write("\r\n");
      out.write("        if (savedTop && savedLeft) {\r\n");
      out.write("            draggableDiv.style.top = savedTop + 'px';\r\n");
      out.write("            draggableDiv.style.left = savedLeft + 'px';\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 2. 마우스를 누른 순간 (mousedown)\r\n");
      out.write("    draggableDiv.addEventListener('mousedown', (e) => {\r\n");
      out.write("        isDragging = true;\r\n");
      out.write("        offsetX = e.clientX - draggableDiv.getBoundingClientRect().left;\r\n");
      out.write("        offsetY = e.clientY - draggableDiv.getBoundingClientRect().top;\r\n");
      out.write("        \r\n");
      out.write("        document.body.style.userSelect = 'none';\r\n");
      out.write("        draggableDiv.style.zIndex = '9999';\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 3. 마우스가 이동 중일 때 (mousemove)\r\n");
      out.write("    document.addEventListener('mousemove', (e) => {\r\n");
      out.write("        if (!isDragging) return;\r\n");
      out.write("        \r\n");
      out.write("        let newX = e.clientX - offsetX;\r\n");
      out.write("        let newY = e.clientY - offsetY;\r\n");
      out.write("\r\n");
      out.write("        // 뷰포트 경계를 넘지 않도록 위치 제한\r\n");
      out.write("        const maxX = window.innerWidth - draggableDiv.offsetWidth;\r\n");
      out.write("        const maxY = window.innerHeight - draggableDiv.offsetHeight;\r\n");
      out.write("        newX = Math.max(0, Math.min(newX, maxX));\r\n");
      out.write("        newY = Math.max(0, Math.min(newY, maxY));\r\n");
      out.write("        \r\n");
      out.write("        draggableDiv.style.left = newX + 'px';\r\n");
      out.write("        draggableDiv.style.top = newY + 'px';\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 4. 마우스를 떼는 순간 (mouseup)\r\n");
      out.write("    document.addEventListener('mouseup', () => {\r\n");
      out.write("        isDragging = false;\r\n");
      out.write("        document.body.style.userSelect = '';\r\n");
      out.write("        draggableDiv.style.zIndex = '10';\r\n");
      out.write("\r\n");
      out.write("        // 마지막으로 이동된 위치를 sessionStorage에 저장\r\n");
      out.write("        sessionStorage.setItem('sideNavTop', parseInt(draggableDiv.style.top));\r\n");
      out.write("        sessionStorage.setItem('sideNavLeft', parseInt(draggableDiv.style.left));\r\n");
      out.write("    });\r\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("<section class=\"min-height\">\r\n");
      out.write("<h1>갤러리 글쓰기</h1><br>\r\n");
      out.write("<form action=\"../board_proc/write_gallery_proc.jsp\" method=\"post\" enctype=\"multipart/form-data\" class=\"write-form\">\r\n");
      out.write("	<table>\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>제목</td>\r\n");
      out.write("			<td><input type=\"text\" name=\"writetitle\"></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>내용</td>\r\n");
      out.write("			<td>\r\n");
      out.write("				<textarea class=\"text\" name=\"writetext\"></textarea>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>파일</td>\r\n");
      out.write("			<td>\r\n");
      out.write("			\r\n");
      out.write("				<div id=\"file_container_0\" class=\"file-container\">\r\n");
      out.write("					<input type=\"file\" name=\"upfile_0\" id=\"upfile_0\" accept=\".gif, .jpg, .png\">\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<input type=\"submit\" value=\"작성\">\r\n");
      out.write("				<button type=\"button\" class=\"btn-cancel\" onclick=\"history.back()\">취소</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("	</table>\r\n");
      out.write("</form>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".board-footer {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    border-top: 1px solid #e9ecef;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    margin-top: 30px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-around;\r\n");
      out.write("    align-items: flex-start;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    min-height: 10vh;\r\n");
      out.write("    margin-left: auto;\r\n");
      out.write("    margin-right: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-footer > div {\r\n");
      out.write("    flex: 1;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    color: #6c757d;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    line-height: 1.5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-footer > div:not(:last-child) {\r\n");
      out.write("    border-right: 1px solid #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<footer class=\"board-footer\">\r\n");
      out.write("    <div>내용 없음</div>\r\n");
      out.write("    <div>내용 없음</div>\r\n");
      out.write("    <div>내용 없음</div>\r\n");
      out.write("    <div>내용 없음</div>\r\n");
      out.write("</footer>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("    const fileArea = document.querySelector('.write-form tbody tr:nth-child(3) td:nth-child(2)');\r\n");
      out.write("    let fileIndex = 0;\r\n");
      out.write("    const file_limit = 10 +1; // 파일 업로드 제한 수\r\n");
      out.write("\r\n");
      out.write("    // 초기 파일 입력 필드에 이벤트 리스너를 즉시 연결\r\n");
      out.write("    addEventListenersToFileInput(document.getElementById('upfile_0'));\r\n");
      out.write("\r\n");
      out.write("    // 파일 입력 필드에 이벤트 리스너를 추가하는 함수\r\n");
      out.write("    function addEventListenersToFileInput(inputElement) {\r\n");
      out.write("        inputElement.addEventListener('change', handleFileChange);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 파일 변경 이벤트 핸들러\r\n");
      out.write("    function handleFileChange(event) {\r\n");
      out.write("        const currentInput = event.target;\r\n");
      out.write("        const container = currentInput.closest('.file-container');\r\n");
      out.write("        const allInputs = fileArea.querySelectorAll('input[type=\"file\"]');\r\n");
      out.write("        \r\n");
      out.write("        if (!container) return;\r\n");
      out.write("        \r\n");
      out.write("        // 현재 파일의 개수 확인\r\n");
      out.write("        if (currentInput.files.length > 0) {\r\n");
      out.write("            // 전체 파일 입력 필드의 개수가 n개 이상이면\r\n");
      out.write("            if (allInputs.length >= file_limit) {\r\n");
      out.write("                // 경고창을 띄우고\r\n");
      out.write("                alert('더 이상 파일을 업로드할 수 없습니다. (최대 '+(file_limit-1)+'개)');\r\n");
      out.write("                // 현재 선택한 파일의 값을 비운 뒤 함수 종료\r\n");
      out.write("                currentInput.value = '';\r\n");
      out.write("                return; \r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        // 기존의 취소 버튼 제거\r\n");
      out.write("        const existingCancelButton = container.querySelector('.cancel-button');\r\n");
      out.write("        if (existingCancelButton) {\r\n");
      out.write("            existingCancelButton.remove();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (currentInput.files.length > 0) {\r\n");
      out.write("            // 파일이 선택되었을 때만 취소 버튼 생성 및 추가\r\n");
      out.write("            addCancelButton(container);\r\n");
      out.write("\r\n");
      out.write("            // 현재 입력 필드가 마지막 필드일 때만 새로운 필드를 추가\r\n");
      out.write("            const isLastInput = currentInput === allInputs[allInputs.length - 1];\r\n");
      out.write("\r\n");
      out.write("            if (isLastInput) {\r\n");
      out.write("                addNewFileInput();\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 취소 버튼을 생성하고 추가하는 함수\r\n");
      out.write("    function addCancelButton(container) {\r\n");
      out.write("        const newCancelButton = document.createElement('button');\r\n");
      out.write("        newCancelButton.type = 'button';\r\n");
      out.write("        newCancelButton.className = 'cancel-button';\r\n");
      out.write("        newCancelButton.textContent = '취소';\r\n");
      out.write("\r\n");
      out.write("        newCancelButton.addEventListener('click', () => {\r\n");
      out.write("            // 현재 컨테이너(파일 입력 필드와 취소 버튼)만 제거합니다.\r\n");
      out.write("            container.remove();\r\n");
      out.write("\r\n");
      out.write("            // 파일 입력 필드가 하나도 없으면 초기 필드 다시 생성\r\n");
      out.write("            if (!fileArea.querySelector('.file-container')) {\r\n");
      out.write("                fileIndex = 0;\r\n");
      out.write("                addNewFileInput(true); // isInitial true로 설정\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        container.appendChild(newCancelButton);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 새로운 파일 입력 필드를 추가하는 함수\r\n");
      out.write("    function addNewFileInput(isInitial = false) {\r\n");
      out.write("        const allInputs = fileArea.querySelectorAll('input[type=\"file\"]');\r\n");
      out.write("        if (allInputs.length >= file_limit) {\r\n");
      out.write("            // 이미 n개 이상의 파일 입력 필드가 있다면 더 이상 추가하지 않음\r\n");
      out.write("            return; \r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (!isInitial) {\r\n");
      out.write("            fileIndex++;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        const newContainer = document.createElement('div');\r\n");
      out.write("        newContainer.id = `file_container_${fileIndex}`;\r\n");
      out.write("        newContainer.className = 'file-container';\r\n");
      out.write("\r\n");
      out.write("        const newInput = document.createElement('input');\r\n");
      out.write("        newInput.type = 'file';\r\n");
      out.write("        newInput.name = `upfile_${fileIndex}`;\r\n");
      out.write("        newInput.id = `upfile_${fileIndex}`;\r\n");
      out.write("        newInput.accept = '.gif, .jpg, .png';\r\n");
      out.write("\r\n");
      out.write("        newContainer.appendChild(newInput);\r\n");
      out.write("        fileArea.appendChild(newContainer);\r\n");
      out.write("\r\n");
      out.write("        // 새로운 필드에 이벤트 리스너 연결\r\n");
      out.write("        addEventListenersToFileInput(newInput);\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
