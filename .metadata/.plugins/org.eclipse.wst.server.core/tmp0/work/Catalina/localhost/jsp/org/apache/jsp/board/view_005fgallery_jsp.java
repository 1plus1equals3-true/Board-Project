/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.109
 * Generated at: 2025-10-07 10:43:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.awt.PageAttributes.OrientationRequestedType;
import java.sql.*;
import lib.DB;
import java.util.ArrayList;
import java.sql.*;
import lib.DB;

public final class view_005fgallery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/board/op_bot.jsp", Long.valueOf(1759833316200L));
    _jspx_dependants.put("/board/op_top.jsp", Long.valueOf(1759833316201L));
    _jspx_dependants.put("/include/side_nav.jsp", Long.valueOf(1759833316207L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.awt.PageAttributes.OrientationRequestedType");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>갤러리 글</title>\r\n");
      out.write("<style>\r\n");
      out.write("*{\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write(".view-table {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    margin: 20px auto;\r\n");
      out.write("    max-width: 800px;\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    border: 1px solid #dee2e6;\r\n");
      out.write("    border-radius: 8px;\r\n");
      out.write("    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table tr:first-child td {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    font-size: 1.2em;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    padding: 15px;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("    border-bottom: 2px solid #ced4da;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table tr:nth-child(2) td {\r\n");
      out.write("    padding: 10px 15px;\r\n");
      out.write("    color: #6c757d;\r\n");
      out.write("    border-bottom: 1px solid #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table tr:nth-child(n) td {\r\n");
      out.write("    padding: 10px 15px;\r\n");
      out.write("    border-bottom: 1px solid #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table tr:nth-child(2) td:not(:last-child) {\r\n");
      out.write("    /*border-right: 1px solid #e9ecef;*/\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table tr:last-child td {\r\n");
      out.write("    padding: 20px 15px;\r\n");
      out.write("    line-height: 1.6;\r\n");
      out.write("    word-break: break-all;\r\n");
      out.write("    min-height: 200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table .text {\r\n");
      out.write("    white-space: pre-wrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group {\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group button {\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("    margin: 0 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-modify {\r\n");
      out.write("    background-color: #ffc107;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-modify:hover {\r\n");
      out.write("    background-color: #e0a800;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-delete {\r\n");
      out.write("    background-color: #dc3545;\r\n");
      out.write("    color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-delete:hover {\r\n");
      out.write("    background-color: #c82333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-list {\r\n");
      out.write("    background-color: #007bff;\r\n");
      out.write("    color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group .btn-list:hover {\r\n");
      out.write("    background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".comment-form {\r\n");
      out.write("    display: flex; /* Use flexbox to align items horizontally */\r\n");
      out.write("    align-items: center; /* Vertically center the input and button */\r\n");
      out.write("    padding: 10px 15px; /* Add some padding, similar to the table cells */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".comment-form textarea {\r\n");
      out.write("    flex-grow: 1; /* Make the textarea take up the available space */\r\n");
      out.write("    margin-right: 10px; /* Add some space between the textarea and the button */\r\n");
      out.write("    padding: 8px; /* Padding inside the textarea */\r\n");
      out.write("    border: 1px solid #ced4da; /* A subtle border */\r\n");
      out.write("    border-radius: 4px; /* Slightly rounded corners */\r\n");
      out.write("    font-size: 14px; /* Match the font size of the table */\r\n");
      out.write("    resize: vertical; /* Allow vertical resizing, but not horizontal */\r\n");
      out.write("    min-height: 50px; /* Give it a minimum height */\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".comment-form button {\r\n");
      out.write("    padding: 8px 16px; /* Padding for the button */\r\n");
      out.write("    background-color: #007bff; /* Use a primary color, similar to your list button */\r\n");
      out.write("    color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".comment-form button:hover {\r\n");
      out.write("    background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".delete-button {\r\n");
      out.write("    display: inline-block; /* <a> 태그가 패딩과 마진을 가질 수 있도록 블록 요소처럼 동작하게 함 */\r\n");
      out.write("    padding: 8px 16px; /* 폼 버튼과 동일한 패딩 */\r\n");
      out.write("    background-color: #dc3545; /* 삭제를 의미하는 빨간색 */\r\n");
      out.write("    color: white; /* 흰색 글자 */\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("    text-decoration: none; /* 기본 밑줄 제거 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".delete-button:hover {\r\n");
      out.write("    background-color: #c82333; /* 마우스를 올렸을 때 더 어두운 빨간색 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".modify-button {\r\n");
      out.write("    display: inline-block; /* <a> 태그가 패딩과 마진을 가질 수 있도록 블록 요소처럼 동작하게 함 */\r\n");
      out.write("    padding: 8px 16px; /* 폼 버튼과 동일한 패딩 */\r\n");
      out.write("    background-color: #ffc107; /* 주황색 */\r\n");
      out.write("    color: black; /*  글자 */\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("    text-decoration: none; /* 기본 밑줄 제거 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".modify-button:hover {\r\n");
      out.write("    background-color: #e0a800; /* 더 진한 주황색 호버 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".edit-form {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    gap: 10px; /* 요소들 사이에 간격을 줍니다 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".edit-form textarea {\r\n");
      out.write("    flex-grow: 1;\r\n");
      out.write("    padding: 8px;\r\n");
      out.write("    border: 1px solid #ced4da;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    resize: vertical;\r\n");
      out.write("    min-height: 50px;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".edit-form .btn-submit { /* 수정 버튼 스타일 */\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    background-color: #ffc107; /* modify-button 색상과 맞춤 */\r\n");
      out.write("    color: black;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".edit-form .btn-cancel { /* 취소 버튼 스타일 */\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    background-color: #dc3545; /* delete-button 색상과 맞춤 */\r\n");
      out.write("    color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table img {\r\n");
      out.write("	width: 300px;\r\n");
      out.write("  	height: 300px;\r\n");
      out.write("  	object-fit: cover;\r\n");
      out.write("  	margin: 20px;\r\n");
      out.write("  	border: 1px solid #e9ecef;\r\n");
      out.write("  	border-radius: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table .td40 {\r\n");
      out.write("	width: 40%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table .td20 {\r\n");
      out.write("	width: 20%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".view-table a {\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	margin: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

String login_id = "";
login_id = (String)session.getAttribute("ss_check");
String login_idx = "";
String login_name = "";
String login_upfile = "";
int login_rank = -1;

if(login_id == null || login_id.equals("") || login_id.equals("null")) {
}else {
	String sqll = null;
	Connection connl =null;
	PreparedStatement psl = null;
	ResultSet rsl = null;
	
	try {
		
		connl = DB.getConnection();
		
		sqll = "SELECT * FROM member WHERE uid=?";
		psl = connl.prepareStatement(sqll);
		psl.setString(1, login_id);
		
		rsl = psl.executeQuery();
		rsl.next();
		
		login_idx = rsl.getString("idx");
		login_name = rsl.getString("name");
		login_upfile = rsl.getString("upfile");
		login_rank = rsl.getInt("member_rank");
		
	}catch (Exception e) {
		out.println(e.toString());
		out.println(sqll);
	}
}

if (login_rank == 0) {
	
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("		alert(\"비활성화된 회원입니다.\");\r\n");
      out.write("		location.replace(\"../member/Login.jsp\")\r\n");
      out.write("	</script> ");

	session.removeAttribute("ss_check");
	return;
}


      out.write("<style>\r\n");
      out.write(".min-height {\r\n");
      out.write("	min-height: 80vh;\r\n");
      out.write("}\r\n");
      out.write("*{\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write(".board-header {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    border-bottom: 2px solid #e9ecef;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    min-height: 10vh;\r\n");
      out.write("    margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header h1 {\r\n");
      out.write("    font-size: 28px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header h1 a {\r\n");
      out.write("	font-size: 28px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header nav ul {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    gap: 50px;\r\n");
      out.write("    text-align: right;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-header nav li a {\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    /*color: #495057;*/\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: 500;\r\n");
      out.write("    transition: color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("header img {\r\n");
      out.write("	width: 40px;\r\n");
      out.write("    height: 40px;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    border: 1px solid #ced4da;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logout-btn {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("    color: white;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write(".logout-btn:hover {\r\n");
      out.write("    background-color: #dc3545;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".mypage-btn {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("    color: white;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write(".mypage-btn:hover {\r\n");
      out.write("    background-color: #007bff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-info {\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    padding: 8px 16px;\r\n");
      out.write("    border: 1px solid gray;\r\n");
      out.write("    border-radius: 4px;\r\n");
      out.write("    color: black;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    font-weight: 500;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
 if(login_id == null || login_id.equals("") || login_id.equals("null")) { 
      out.write("<header class=\"board-header\">\r\n");
      out.write("    <h1><a href=\"../board_proc/main_proc.jsp\">GO GO BOARD</a></h1>\r\n");
      out.write("    <nav>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><span class=\"user-info\">비로그인</span></li>\r\n");
      out.write("            <li> &nbsp; &nbsp; &nbsp; &nbsp; </li>\r\n");
      out.write("            <li><a href=\"../member/Join.jsp\" class=\"mypage-btn\">회원가입</a></li>\r\n");
      out.write("            <li><a href=\"../member/Login.jsp\" class=\"mypage-btn\">로그인</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("</header>\r\n");
 }else { 
      out.write("<header class=\"board-header\">\r\n");
      out.write("    <h1><a href=\"../board_proc/main_proc.jsp\">GO GO BOARD</a></h1>\r\n");
      out.write("    <nav>\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li><span class=\"user-info\">이름 : ");
      out.print( login_name );
      out.write("</span></li>\r\n");
      out.write("            ");
 if (login_upfile == null || login_upfile.equals("")) { 
      out.write("<li> &nbsp; &nbsp; &nbsp; &nbsp; </li>\r\n");
      out.write("            ");
 }else { 
      out.write("<li><img alt=\"X\" src=\"../member/Download.jsp?uid=");
      out.print( login_id );
      out.write("\"></li>\r\n");
      out.write("            ");
 } 
      out.write("<li><a href=\"../member/View.jsp?uid=");
      out.print( login_id );
      out.write("\" class=\"mypage-btn\">마이페이지</a></li>\r\n");
      out.write("            <li><a href=\"../member/Logout.jsp\" class=\"logout-btn\">로그아웃</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("</header>\r\n");
 } 
      out.write("<style>\r\n");
      out.write(".side-nav {\r\n");
      out.write("  /* fixed 속성으로 뷰포트에 바로 고정 */\r\n");
      out.write("  position: fixed;\r\n");
      out.write("  /* 뷰포트 상단에서 20px 떨어진 곳에 고정 */\r\n");
      out.write("  top: 100px; \r\n");
      out.write("  /* 뷰포트 왼쪽에서 20px 떨어진 곳에 고정 */\r\n");
      out.write("  left: 10px;\r\n");
      out.write("  width: 80px;\r\n");
      out.write("  height: fit-content;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("  background-color: #f9f9f9;\r\n");
      out.write("  z-index: 10;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav h6 {\r\n");
      out.write("  margin-top: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav h4 {\r\n");
      out.write("  margin-top: 0;\r\n");
      out.write("  margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav ul {\r\n");
      out.write("  list-style-type: none;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".side-nav li {\r\n");
      out.write("  padding: 5px 0;\r\n");
      out.write("}\r\n");
      out.write(".side-nav a {\r\n");
      out.write("	color: black;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write(".side-nav a:hover {\r\n");
      out.write("	color: blue;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<div class=\"side-nav\">\r\n");
      out.write("	<h4>게시판</h4>\r\n");
      out.write("	<ul>\r\n");
      out.write("		<li><h6><a href=\"../board/list_notice.jsp\">공지사항</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_member.jsp\">회원 게시판</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_anonymity.jsp\">익명 게시판</a></h6></li>\r\n");
      out.write("		<li><h6><a href=\"../board/list_gallery.jsp\">갤러리</a></h6></li>\r\n");
      out.write("	</ul>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const draggableDiv = document.querySelector('.side-nav');\r\n");
      out.write("    let isDragging = false;\r\n");
      out.write("    let offsetX, offsetY;\r\n");
      out.write("\r\n");
      out.write("    // 1. 페이지 로드 시 저장된 위치를 불러와 적용\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        // sessionStorage에서 위치 값 가져오기\r\n");
      out.write("        const savedTop = sessionStorage.getItem('sideNavTop');\r\n");
      out.write("        const savedLeft = sessionStorage.getItem('sideNavLeft');\r\n");
      out.write("\r\n");
      out.write("        if (savedTop && savedLeft) {\r\n");
      out.write("            draggableDiv.style.top = savedTop + 'px';\r\n");
      out.write("            draggableDiv.style.left = savedLeft + 'px';\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 2. 마우스를 누른 순간 (mousedown)\r\n");
      out.write("    draggableDiv.addEventListener('mousedown', (e) => {\r\n");
      out.write("        isDragging = true;\r\n");
      out.write("        offsetX = e.clientX - draggableDiv.getBoundingClientRect().left;\r\n");
      out.write("        offsetY = e.clientY - draggableDiv.getBoundingClientRect().top;\r\n");
      out.write("        \r\n");
      out.write("        document.body.style.userSelect = 'none';\r\n");
      out.write("        draggableDiv.style.zIndex = '9999';\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 3. 마우스가 이동 중일 때 (mousemove)\r\n");
      out.write("    document.addEventListener('mousemove', (e) => {\r\n");
      out.write("        if (!isDragging) return;\r\n");
      out.write("        \r\n");
      out.write("        let newX = e.clientX - offsetX;\r\n");
      out.write("        let newY = e.clientY - offsetY;\r\n");
      out.write("\r\n");
      out.write("        // 뷰포트 경계를 넘지 않도록 위치 제한\r\n");
      out.write("        const maxX = window.innerWidth - draggableDiv.offsetWidth;\r\n");
      out.write("        const maxY = window.innerHeight - draggableDiv.offsetHeight;\r\n");
      out.write("        newX = Math.max(0, Math.min(newX, maxX));\r\n");
      out.write("        newY = Math.max(0, Math.min(newY, maxY));\r\n");
      out.write("        \r\n");
      out.write("        draggableDiv.style.left = newX + 'px';\r\n");
      out.write("        draggableDiv.style.top = newY + 'px';\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 4. 마우스를 떼는 순간 (mouseup)\r\n");
      out.write("    document.addEventListener('mouseup', () => {\r\n");
      out.write("        isDragging = false;\r\n");
      out.write("        document.body.style.userSelect = '';\r\n");
      out.write("        draggableDiv.style.zIndex = '10';\r\n");
      out.write("\r\n");
      out.write("        // 마지막으로 이동된 위치를 sessionStorage에 저장\r\n");
      out.write("        sessionStorage.setItem('sideNavTop', parseInt(draggableDiv.style.top));\r\n");
      out.write("        sessionStorage.setItem('sideNavLeft', parseInt(draggableDiv.style.left));\r\n");
      out.write("    });\r\n");
      out.write("</script>");

String idx = request.getParameter("idx");

Connection conn=null;
Statement st = null;
PreparedStatement ps = null;
ResultSet rs = null;
 
String sql = null;

String cidx = "";
String comname = "";
String ment = "";
String comdate = "";
String cuid = "";
String boardtype = "";
int file_count = -1;
int temp_rank = -1;

try{
    
   conn = DB.getConnection();

   sql = "SELECT b.*, COUNT(g.bidx) AS file_count FROM board b LEFT JOIN board_gallery g ON b.idx = g.bidx where b.idx='"+idx+"'";
   st = conn.createStatement();
   rs = st.executeQuery(sql);
    
  }catch(Exception e){ 
    e.printStackTrace();
    out.println(sql);
}

//--------

if(rs != null){
	rs.next();
	String name = rs.getString("name");
	String title = rs.getString("title");
	String content = rs.getString("content");
	String hit = rs.getString("hit");
	String regdate = rs.getString("regdate");
	String ip = rs.getString("ip");
	String uid = rs.getString("uid");
	String upfile = rs.getString("upfile");
	String originalfile = rs.getString("originalfile");
	boardtype = rs.getString("boardtype");
	file_count = rs.getInt("file_count");
	
	if (!boardtype.equals("3")) {
		response.sendRedirect("../board/view.jsp?idx="+idx);
		return;
	}
	
	int ihit = Integer.parseInt(hit);
	ihit+=1;
	hit = Integer.toString(ihit);
	
try {
	
	conn = DB.getConnection();
	sql = "update board set hit=? where idx=?";
	ps = conn.prepareStatement(sql);
	ps.setString(1, hit);
	ps.setString(2, idx);
	ps.executeUpdate();
	
}catch(Exception e){ 
	  out.println(e.toString());
	  out.println(sql);
}


	


 temp_rank = login_rank; 
      out.write("<section class=\"min-height\">\r\n");
      out.write("<h1>작성 글</h1><br>\r\n");
      out.write("\r\n");
      out.write("<table class=\"view-table\">\r\n");
      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td colspan=\"4\">");
      out.print( title );
      out.write("</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td>작성자 : ");
      out.print( name );
      out.write("</td>\r\n");
      out.write("		<td>작성일자 : ");
      out.print( regdate );
      out.write("</td>\r\n");
      out.write("		<td>조회수 : ");
      out.print( hit );
      out.write("</td>\r\n");
      out.write("		<td>아이피 : ");
      out.print( ip );
      out.write("</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td colspan=\"4\"><div style=\"min-height: 200px; text-align: left;\">");
      out.print( content.replace("\r\n","<br>") );
      out.write("</div></td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td colspan=\"4\">\r\n");
      out.write("			");
 for (int i=0; i<file_count; i++) { 
      out.write("<a href=\"../board_proc/download_gallery.jsp?idx=");
      out.print( idx );
      out.write("&fileidx=");
      out.print( i );
      out.write("\" target=\"_blank\">\r\n");
      out.write("					<img alt=\"");
      out.print( originalfile );
      out.write("\" src=\"../board_proc/download_gallery.jsp?idx=");
      out.print( idx );
      out.write("&fileidx=");
      out.print( i );
      out.write("\">\r\n");
      out.write("				</a>\r\n");
      out.write("			");
 } 
      out.write("</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");

try {
	conn = DB.getConnection();
	sql = " SELECT c.*, m.name as comname from comment c LEFT JOIN member m ON c.uid = m.uid where bidx="+ idx;
	st = conn.createStatement();
	rs = st.executeQuery(sql);
	
}catch(Exception e){ 
    e.printStackTrace();
    out.println(sql);
}

      out.write("<table class=\"view-table\">\r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("	<td colspan=\"4\">댓글</td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("	<td class=\"td20\">작성자</td>\r\n");
      out.write("	<td class=\"td40\">내용</td>\r\n");
      out.write("	<td class=\"td20\">작성일자</td>\r\n");
      out.write("	<td class=\"td20\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");

   while (rs.next()) {
      cidx = rs.getString("idx");
      comname = rs.getString("comname");
      ment = rs.getString("ment");
      comdate = rs.getString("regdate");
      cuid = rs.getString("uid");
   

      out.write("<tr id=\"row-");
      out.print( cidx );
      out.write("\">\r\n");
      out.write("	    <td>");
      out.print( comname );
      out.write("</td>\r\n");
      out.write("	    <td id=\"ment-");
      out.print( cidx );
      out.write("\" style=\"text-align: left;\">");
      out.print( ment.replace("\r\n","<br>") );
      out.write("</td>\r\n");
      out.write("	    <td>");
      out.print( comdate );
      out.write("</td>\r\n");
      out.write("	");
 if (cuid != null && cuid.equals(login_id)) { 
      out.write("<td>\r\n");
      out.write("	        <button class=\"modify-button\" onclick=\"toggleEditRow('");
      out.print( cidx );
      out.write("')\">수정</button>\r\n");
      out.write("	        <button class=\"delete-button\" data-cidx=\"");
      out.print( cidx );
      out.write("\">삭제</button>\r\n");
      out.write("	    </td>\r\n");
      out.write("    ");
 }else { 
      out.write("<td></td>\r\n");
      out.write("    ");
 } 
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("	<tr id=\"edit-row-");
      out.print( cidx );
      out.write("\" style=\"display:none;\">\r\n");
      out.write("	    <td>");
      out.print( comname );
      out.write("</td>\r\n");
      out.write("	    <td colspan=\"3\">\r\n");
      out.write("	    	<form id=\"editForm-");
      out.print( cidx );
      out.write("\" action=\"../board_proc/comment_modify.jsp\" method=\"post\" class=\"edit-form\">\r\n");
      out.write("	    		<input type=\"hidden\" name=\"idx\" value=\"");
      out.print( idx );
      out.write("\">\r\n");
      out.write("	    		<input type=\"hidden\" name=\"cidx\" value=\"");
      out.print( cidx );
      out.write("\">\r\n");
      out.write("		        <textarea name=\"commentmodify\">");
      out.print( ment );
      out.write("</textarea>\r\n");
      out.write("		        <button type=\"submit\" class=\"btn-submit\">수정</button>\r\n");
      out.write("		        <button type=\"button\" class=\"btn-cancel\" onclick=\"cancelEdit('");
      out.print( cidx );
      out.write("')\">취소</button>\r\n");
      out.write("	        </form>\r\n");
      out.write("	        \r\n");
      out.write("	    </td>\r\n");
      out.write("	</tr>\r\n");
      out.write("\r\n");
 } 
 if(login_id != null) { 
      out.write("<tr>\r\n");
      out.write("	<td></td>\r\n");
      out.write("	<td colspan=\"3\">\r\n");
      out.write("		<form id=\"comment-write-form\" action=\"../board_proc/comment_proc.jsp\" method=\"post\" class=\"comment-form\">\r\n");
      out.write("			<input type=\"hidden\" name=\"bidx\" value=\"");
      out.print( idx );
      out.write("\">\r\n");
      out.write("			<textarea name=\"commenttext\"></textarea>\r\n");
      out.write("			<button type=\"submit\">등록</button>\r\n");
      out.write("		</form>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
 }else{ 
      out.write("<tr>\r\n");
      out.write("	<td></td>\r\n");
      out.write("	<td colspan=\"3\">\r\n");
      out.write("		댓글을 작성하려면 로그인하세요.\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
 } 
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("<div class=\"button-group\">\r\n");
 if (boardtype.equals("0")) { 
		if (login_rank == 9) {
			
      out.write("<button type=\"button\" class=\"btn-modify\" onclick=\"modify()\">수정</button>\r\n");
      out.write("			<button type=\"button\" class=\"btn-delete\" onclick=\"wdelete()\">삭제</button>\r\n");
      out.write("			");

		}

}else if (boardtype.equals("1") || boardtype.equals("3")) {
	if (uid == null) { uid = ""; }
	if (login_rank == 9 || uid.equals(login_id)) {
		
      out.write("<button type=\"button\" class=\"btn-modify\" onclick=\"modify()\">수정</button>\r\n");
      out.write("		<button type=\"button\" class=\"btn-delete\" onclick=\"wdelete()\">삭제</button>\r\n");
      out.write("		");

	}

}else { 
	
      out.write("<button type=\"button\" class=\"btn-modify\" onclick=\"modify()\">수정</button>\r\n");
      out.write("	<button type=\"button\" class=\"btn-delete\" onclick=\"wdelete()\">삭제</button>\r\n");
 } 
      out.write("<button type=\"button\" onclick=\"list_back()\" class=\"btn-list\">목록</button>\r\n");
      out.write("</div>\r\n");
      out.write("</section>\r\n");
      out.write("<style>\r\n");
      out.write(".board-footer {\r\n");
      out.write("    background-color: #f8f9fa;\r\n");
      out.write("    border-top: 1px solid #e9ecef;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    margin-top: 30px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-around;\r\n");
      out.write("    align-items: flex-start;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    min-height: 10vh;\r\n");
      out.write("    margin-left: auto;\r\n");
      out.write("    margin-right: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-footer > div {\r\n");
      out.write("    flex: 1;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    color: #6c757d;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    line-height: 1.5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".board-footer > div:not(:last-child) {\r\n");
      out.write("    border-right: 1px solid #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<footer class=\"board-footer\">\r\n");
      out.write("    <div>Copyright ⓒ 2025 GO GO.</div>\r\n");
      out.write("    <div>All Rights Reserved.</div>\r\n");
      out.write("</footer>");

}

if (rs != null){
   rs.close();
}

if (ps != null){
	   ps.close();
}

if (st != null){
   st.close();
}

if (conn != null){
   conn.close();
}

      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("//댓글 작성 폼 비동기 처리\r\n");
      out.write("document.getElementById('comment-write-form').addEventListener('submit', function(event) {\r\n");
      out.write("    // 폼 기본 제출 동작(페이지 리로드) 방지\r\n");
      out.write("    event.preventDefault(); \r\n");
      out.write("\r\n");
      out.write("    const formElement = event.target;\r\n");
      out.write("    const commentTextArea = formElement.querySelector('textarea[name=\"commenttext\"]');\r\n");
      out.write("    const newCommentText = commentTextArea.value.trim();\r\n");
      out.write("\r\n");
      out.write("    if (newCommentText === \"\") {\r\n");
      out.write("        alert(\"댓글 내용을 입력해주세요.\");\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 폼 데이터를 URLSearchParams 객체로 변환\r\n");
      out.write("    const formData = new FormData(formElement);\r\n");
      out.write("\r\n");
      out.write("    fetch(formElement.action, {\r\n");
      out.write("        method: 'POST', \r\n");
      out.write("        body: new URLSearchParams(formData), // x-www-form-urlencoded 형식으로 변환\r\n");
      out.write("        headers: {\r\n");
      out.write("            'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("        }\r\n");
      out.write("    })\r\n");
      out.write("    .then(response => {\r\n");
      out.write("        if (!response.ok) {\r\n");
      out.write("            throw new Error('네트워크 응답 오류');\r\n");
      out.write("        }\r\n");
      out.write("        // 서버에서 JSON 응답 받기\r\n");
      out.write("        return response.json(); \r\n");
      out.write("    })\r\n");
      out.write("    .then(data => {\r\n");
      out.write("        // 서버 응답 처리\r\n");
      out.write("        if (data.success) { \r\n");
      out.write("            // 새 댓글을 HTML로 생성\r\n");
      out.write("            const newRowHtml = createCommentRow(data); \r\n");
      out.write("\r\n");
      out.write("            // 테이블에 삽입\r\n");
      out.write("            const commentTable = document.querySelector('.view-table:last-of-type tbody');\r\n");
      out.write("            const commentFormRow = formElement.closest('tr'); // 댓글 폼이 포함된 <tr> \r\n");
      out.write("            \r\n");
      out.write("            // 새 행을 댓글 폼 행 바로 앞에 삽입\r\n");
      out.write("            commentFormRow.insertAdjacentHTML('beforebegin', newRowHtml);\r\n");
      out.write("            \r\n");
      out.write("            // 입력창 초기화\r\n");
      out.write("            commentTextArea.value = '';\r\n");
      out.write("            \r\n");
      out.write("            // alert('댓글이 성공적으로 등록되었습니다.');\r\n");
      out.write("\r\n");
      out.write("        } else {\r\n");
      out.write("            alert('댓글 등록 실패: ' + (data.message || '알 수 없는 오류'));\r\n");
      out.write("        }\r\n");
      out.write("    })\r\n");
      out.write("    .catch(error => {\r\n");
      out.write("        console.error('Fetch 에러:', error);\r\n");
      out.write("        alert('댓글 등록 중 통신 문제가 발생했습니다.');\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function createCommentRow(commentData) {\r\n");
      out.write("\r\n");
      out.write("    const formattedMent = commentData.ment.replace(/\\r?\\n/g, '<br>');\r\n");
      out.write("    const bidx = document.querySelector('input[name=\"bidx\"]').value; // 게시글 idx\r\n");
      out.write("    const login_id = \"");
      out.print( login_id );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("    let actionButtons = '';\r\n");
      out.write("    // 작성자 ID와 로그인 ID가 같을 경우에만 수정/삭제 버튼 추가\r\n");
      out.write("    if (commentData.cuid && commentData.cuid === login_id) {\r\n");
      out.write("        actionButtons = `\r\n");
      out.write("            <td>\r\n");
      out.write("                <button class=\"modify-button\" onclick=\"toggleEditRow(`+commentData.cidx+`)\">수정</button>\r\n");
      out.write("                <button class=\"delete-button\" data-cidx=\"`+commentData.cidx+`\">삭제</button>\r\n");
      out.write("            </td>\r\n");
      out.write("        `;\r\n");
      out.write("    } else {\r\n");
      out.write("        actionButtons = '<td></td>';\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 새 댓글 표시\r\n");
      out.write("    const newCommentRow = `\r\n");
      out.write("        <tr id=\"row-`+commentData.cidx+`\">\r\n");
      out.write("            <td>`+commentData.comname+`</td>\r\n");
      out.write("            <td id=\"ment-`+commentData.cidx+`\" style=\"text-align: left;\">`+formattedMent+`</td>\r\n");
      out.write("            <td>`+commentData.comdate+`</td>\r\n");
      out.write("            `+actionButtons+`\r\n");
      out.write("        </tr>\r\n");
      out.write("    `;\r\n");
      out.write("\r\n");
      out.write("    // 새 댓글 수정 폼 행 (기존 댓글의 ment 값을 사용)\r\n");
      out.write("    const editFormRow = `\r\n");
      out.write("        <tr id=\"edit-row-`+commentData.cidx+`\" style=\"display:none;\">\r\n");
      out.write("            <td>`+commentData.comname+`</td>\r\n");
      out.write("            <td colspan=\"3\">\r\n");
      out.write("                <form id=\"editForm-`+commentData.cidx+`\" action=\"../board_proc/comment_modify.jsp\" method=\"post\" class=\"edit-form\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"idx\" value=\"`+bidx+`\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"cidx\" value=\"`+commentData.cidx+`\">\r\n");
      out.write("                    <textarea name=\"commentmodify\">`+commentData.ment+`</textarea>\r\n");
      out.write("                    <button type=\"submit\" class=\"btn-submit\">수정</button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn-cancel\" onclick=\"cancelEdit(`+commentData.cidx+`)\">취소</button>\r\n");
      out.write("                </form>\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    `;\r\n");
      out.write("\r\n");
      out.write("    // 두 행을 합쳐서 반환\r\n");
      out.write("    return newCommentRow + editFormRow;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 댓글 수정폼 데이터 받기\r\n");
      out.write("//document.querySelectorAll('.edit-form').forEach(form => {\r\n");
      out.write("//    form.addEventListener('submit', function(event) {\r\n");
      out.write("\r\n");
      out.write("//submit 이벤트 발생 시\r\n");
      out.write("document.addEventListener('submit', function(event) {\r\n");
      out.write("    // 이벤트 타겟'.edit-form' 인지 확인\r\n");
      out.write("    if (event.target && event.target.matches('.edit-form')) {\r\n");
      out.write("    	\r\n");
      out.write("        // 폼 submit 비활성화\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        const formElement = event.target;\r\n");
      out.write("        const cidx = formElement.querySelector('input[name=\"cidx\"]').value;\r\n");
      out.write("        const newCommentText = formElement.querySelector('textarea[name=\"commentmodify\"]').value;\r\n");
      out.write("        \r\n");
      out.write("        // 폼 데이터 서버로 전송할 형태로 준비\r\n");
      out.write("        const formData = new FormData(formElement);\r\n");
      out.write("\r\n");
      out.write("        fetch(formElement.action, {\r\n");
      out.write("            method: 'POST', \r\n");
      out.write("            body: new URLSearchParams(formData), \r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        .then(response => {\r\n");
      out.write("            if (!response.ok) {\r\n");
      out.write("                throw new Error('네트워크 응답 오류');\r\n");
      out.write("            }\r\n");
      out.write("            // 서버에서 JSON 응답 받기\r\n");
      out.write("            return response.json(); \r\n");
      out.write("            \r\n");
      out.write("        })\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            // 서버 응답 처리\r\n");
      out.write("            if (data.success) { \r\n");
      out.write("            	\r\n");
      out.write("                // 화면 업데이트\r\n");
      out.write("                const commentDisplayArea = document.getElementById('ment-'+cidx);\r\n");
      out.write("                if (commentDisplayArea) {\r\n");
      out.write("                    // 댓글 내용을 새 텍스트로 변경\r\n");
      out.write("                    const formattedText = newCommentText.replace(/\\r?\\n/g, '<br>');\r\n");
      out.write("                    commentDisplayArea.innerHTML = formattedText;\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                // 수정 폼 숨기기 및 원래 댓글 행 다시 표시\r\n");
      out.write("                // 'edit-row-cidx'숨기고 'row-cidx'보이게\r\n");
      out.write("                cancelEdit(cidx); \r\n");
      out.write("                \r\n");
      out.write("                //alert('댓글이 성공적으로 수정되었습니다.');\r\n");
      out.write("                \r\n");
      out.write("            } else {\r\n");
      out.write("                alert('댓글 수정 실패: ' + (data.message || '알 수 없는 오류'));\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        .catch(error => {\r\n");
      out.write("            console.error('Fetch 에러:', error);\r\n");
      out.write("            alert('댓글 수정 중 통신 문제가 발생했습니다.');\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//댓글 토글\r\n");
      out.write("function toggleEditRow(cidx) {\r\n");
      out.write("    var originalRow = document.getElementById(\"row-\" + cidx);\r\n");
      out.write("    var editRow = document.getElementById(\"edit-row-\" + cidx);\r\n");
      out.write("\r\n");
      out.write("    if (originalRow.style.display !== 'none') {\r\n");
      out.write("        originalRow.style.display = 'none';\r\n");
      out.write("        editRow.style.display = 'table-row'; //\r\n");
      out.write("    } else {\r\n");
      out.write("        originalRow.style.display = 'table-row';\r\n");
      out.write("        editRow.style.display = 'none';\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//댓글 취소 버튼\r\n");
      out.write("function cancelEdit(cidx) {\r\n");
      out.write("    var originalRow = document.getElementById(\"row-\" + cidx);\r\n");
      out.write("    var editRow = document.getElementById(\"edit-row-\" + cidx);\r\n");
      out.write("\r\n");
      out.write("    originalRow.style.display = 'table-row';\r\n");
      out.write("    editRow.style.display = 'none';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//댓글 삭제 버튼 비동기 처리\r\n");
      out.write("document.addEventListener('click', function(event) {\r\n");
      out.write("    // 이벤트 타겟이 'delete-button' 클래스를 가지는지 확인\r\n");
      out.write("    if (event.target && event.target.matches('.delete-button')) {\r\n");
      out.write("        const deleteButton = event.target;\r\n");
      out.write("        const cidx = deleteButton.getAttribute('data-cidx'); // data-cidx 값 가져오기\r\n");
      out.write("\r\n");
      out.write("        if (!cidx) {\r\n");
      out.write("            console.error('댓글 ID(cidx)를 찾을 수 없습니다.');\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 삭제 확인\r\n");
      out.write("        if (!confirm('정말로 이 댓글을 삭제하시겠습니까?')) {\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        const deleteUrl = '../board_proc/comment_delete_proc.jsp'; \r\n");
      out.write("\r\n");
      out.write("        // 비동기 요청 시작\r\n");
      out.write("        fetch(deleteUrl, {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-Type': 'application/x-www-form-urlencoded',\r\n");
      out.write("            },\r\n");
      out.write("            // 삭제할 댓글 ID를 서버에 전달\r\n");
      out.write("            body: 'cidx=' + encodeURIComponent(cidx)\r\n");
      out.write("        })\r\n");
      out.write("        .then(response => {\r\n");
      out.write("            if (!response.ok) {\r\n");
      out.write("                // HTTP 상태 코드가 200-299 범위가 아닌 경우\r\n");
      out.write("                throw new Error('네트워크 응답 오류: ' + response.status);\r\n");
      out.write("            }\r\n");
      out.write("            // 서버에서 JSON 응답 받기 (성공/실패 메시지)\r\n");
      out.write("            return response.json(); \r\n");
      out.write("        })\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            if (data.success) {\r\n");
      out.write("                // 삭제 성공 시 UI에서 댓글 행 제거\r\n");
      out.write("                const commentRow = document.getElementById('row-' + cidx);\r\n");
      out.write("                const editRow = document.getElementById('edit-row-' + cidx);\r\n");
      out.write("\r\n");
      out.write("                if (commentRow) {\r\n");
      out.write("                    commentRow.remove();\r\n");
      out.write("                }\r\n");
      out.write("                if (editRow) {\r\n");
      out.write("                    editRow.remove();\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                //alert('댓글이 성공적으로 삭제되었습니다.');\r\n");
      out.write("            } else {\r\n");
      out.write("                // 서버에서 'success: false'를 보낸 경우\r\n");
      out.write("                alert('댓글 삭제 실패: ' + (data.message || '권한이 없거나 알 수 없는 오류입니다.'));\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        .catch(error => {\r\n");
      out.write("            console.error('Fetch 에러:', error);\r\n");
      out.write("            alert('댓글 삭제 중 통신 문제가 발생했습니다.');\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("//글 목록 버튼\r\n");
      out.write("function list_back() {\r\n");
      out.write("	var boardtype = \"");
      out.print( boardtype );
      out.write("\";\r\n");
      out.write("	\r\n");
      out.write("	if (boardtype == \"0\") {\r\n");
      out.write("		window.location.href = 'list_notice.jsp';\r\n");
      out.write("	}else if (boardtype == \"1\") {\r\n");
      out.write("		window.location.href = 'list_member.jsp';\r\n");
      out.write("	}else if (boardtype == \"3\") {\r\n");
      out.write("		window.location.href = 'list_gallery.jsp';\r\n");
      out.write("	}else {\r\n");
      out.write("		window.location.href = 'list_anonymity.jsp';\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("//글 수정 버튼\r\n");
      out.write("function modify() {\r\n");
      out.write("	var idx = \"");
      out.print( idx );
      out.write("\";\r\n");
      out.write("	var boardtype = \"");
      out.print( boardtype );
      out.write("\";\r\n");
      out.write("	var login_rank = \"");
      out.print( temp_rank );
      out.write("\";\r\n");
      out.write("	\r\n");
      out.write("	if (boardtype == \"0\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			window.location.href = 'modify.jsp?idx=' + idx;\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else if (boardtype == \"1\" || boardtype == \"3\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			window.location.href = 'modify_gallery.jsp?idx=' + idx;\r\n");
      out.write("		}else if (0 <= login_rank && login_rank < 9) {\r\n");
      out.write("			let passinput = prompt('비밀번호를 입력하세요');\r\n");
      out.write("					if (passinput === null) {\r\n");
      out.write("						return;\r\n");
      out.write("					} else if (passinput === \"\") {\r\n");
      out.write("						alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("						return;\r\n");
      out.write("					} else {\r\n");
      out.write("						window.location.href = 'modify_gallery.jsp?idx=' + idx;// + \"&passinput=\" + passinput;\r\n");
      out.write("						return;\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			window.location.href = 'modify.jsp?idx=' + idx;\r\n");
      out.write("		}else {\r\n");
      out.write("			let passinput = prompt('비밀번호를 입력하세요');\r\n");
      out.write("			if (passinput === null) {\r\n");
      out.write("				return;\r\n");
      out.write("			} else if (passinput === \"\") {\r\n");
      out.write("				alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("				return;\r\n");
      out.write("			} else {\r\n");
      out.write("				window.location.href = 'modify_check.jsp?idx=' + idx + \"&passinput=\" + passinput + \"&type=anony\";\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("//글 삭제 버튼\r\n");
      out.write("function wdelete() {\r\n");
      out.write("	var idx = \"");
      out.print( idx );
      out.write("\";\r\n");
      out.write("	var boardtype = \"");
      out.print( boardtype );
      out.write("\";\r\n");
      out.write("	var login_rank = \"");
      out.print( temp_rank );
      out.write("\";\r\n");
      out.write("	\r\n");
      out.write("	if (boardtype == \"0\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else if (boardtype == \"1\" || boardtype == \"3\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else if (0 < login_rank && login_rank < 9) {\r\n");
      out.write("			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');\r\n");
      out.write("					if (passinput === null) {\r\n");
      out.write("						return;\r\n");
      out.write("					} else if (passinput === \"\") {\r\n");
      out.write("						alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("						return;\r\n");
      out.write("					} else {\r\n");
      out.write("						location.replace(\"../board_proc/delete_check.jsp?idx=");
      out.print( idx );
      out.write("&passinput=\"+passinput);\r\n");
      out.write("						return;\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else {\r\n");
      out.write("			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');\r\n");
      out.write("			if (passinput === null) {\r\n");
      out.write("				return;\r\n");
      out.write("			} else if (passinput === \"\") {\r\n");
      out.write("				alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("				return;\r\n");
      out.write("			} else {\r\n");
      out.write("				location.replace(\"../board_proc/delete_check.jsp?idx=");
      out.print( idx );
      out.write("&passinput=\"+passinput+\"&type=anony\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//댓글 삭제 버튼\r\n");
      out.write("function cdelete() {\r\n");
      out.write("	var idx = \"");
      out.print( idx );
      out.write("\";\r\n");
      out.write("	var boardtype = \"");
      out.print( boardtype );
      out.write("\";\r\n");
      out.write("	var login_rank = \"");
      out.print( temp_rank );
      out.write("\";\r\n");
      out.write("	\r\n");
      out.write("	if (boardtype == \"0\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else if (boardtype == \"1\") {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else if (0 <= login_rank && login_rank < 9) {\r\n");
      out.write("			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');\r\n");
      out.write("					if (passinput === null) {\r\n");
      out.write("						return;\r\n");
      out.write("					} else if (passinput === \"\") {\r\n");
      out.write("						alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("						return;\r\n");
      out.write("					} else {\r\n");
      out.write("						location.replace(\"../board_proc/delete_check.jsp?idx=");
      out.print( idx );
      out.write("&passinput=\"+passinput);\r\n");
      out.write("						return;\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("		}else {\r\n");
      out.write("			alert(\"권한 없음\")\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	}else {\r\n");
      out.write("		if (login_rank == 9) {\r\n");
      out.write("			var con_del_check = confirm(\"게시글을 삭제하시겠습니까?\");\r\n");
      out.write("			if (con_del_check) {\r\n");
      out.write("				location.replace(\"../board_proc/delete_proc.jsp?idx=");
      out.print( idx );
      out.write("\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}else {\r\n");
      out.write("			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');\r\n");
      out.write("			if (passinput === null) {\r\n");
      out.write("				return;\r\n");
      out.write("			} else if (passinput === \"\") {\r\n");
      out.write("				alert(\"아무것도 입력하지 않았습니다.\");\r\n");
      out.write("				return;\r\n");
      out.write("			} else {\r\n");
      out.write("				location.replace(\"../board_proc/delete_check.jsp?idx=");
      out.print( idx );
      out.write("&passinput=\"+passinput+\"&type=anony\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
