/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.109
 * Generated at: 2025-10-11 11:27:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fproc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import lib.DB;

public final class comment_005fdelete_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("lib.DB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    // JSON 응답 설정을 최상단에 배치
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");

    // JSP 내장 객체 사용 (로그인 정보는 세션에서 가져옵니다)
    String login_id = (String) session.getAttribute("ss_check"); 
    String cidx = request.getParameter("cidx"); // 클라이언트에서 'cidx'로 전달받습니다.
    
    // 응답 JSON 메시지 초기화
    String jsonResponse;

    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    if (login_id == null || cidx == null || cidx.isEmpty()) {
        jsonResponse = "{\"success\": false, \"message\": \"로그인이 필요하거나 댓글 정보가 부족합니다.\"}";
        out.print(jsonResponse);
        return;
    }
    
    try {
        conn = DB.getConnection();
        String uid = null;
        
        // 1. 해당 댓글의 작성자 ID 확인
        String checkSql = "SELECT uid FROM comment WHERE idx = ?";
        ps = conn.prepareStatement(checkSql);
        ps.setString(1, cidx);
        rs = ps.executeQuery();

        if (rs.next()) {
            uid = rs.getString("uid");
        }
        
        // ResultSet과 PreparedStatement 정리
        if (rs != null) rs.close();
        if (ps != null) ps.close();

        // 2. 로그인 ID와 댓글 작성자 ID 비교
        if (uid == null || !login_id.equals(uid)) {
            // 권한 없음
            jsonResponse = "{\"success\": false, \"message\": \"댓글을 삭제할 권한이 없습니다.\"}";
        } else {
            // 3. 권한이 있다면 댓글 삭제 실행
            String deleteSql = "DELETE FROM comment WHERE idx = ? AND uid = ?";
            ps = conn.prepareStatement(deleteSql);
            ps.setString(1, cidx);
            ps.setString(2, login_id);
            
            int deletedRows = ps.executeUpdate();

            if (deletedRows > 0) {
                // 삭제 성공
                jsonResponse = "{\"success\": true, \"message\": \"댓글 삭제 성공\"}";
            } else {
                // 삭제 실패 (이미 삭제되었거나 ID가 일치하지 않는 경우)
                jsonResponse = "{\"success\": false, \"message\": \"댓글을 찾을 수 없거나 삭제에 실패했습니다.\"}";
            }
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        // 데이터베이스 오류 발생 시
        jsonResponse = "{\"success\": false, \"message\": \"데이터베이스 오류가 발생했습니다.\"}";
    } finally {
        if (rs != null) try { rs.close(); } catch(SQLException ignored) {}
        if (ps != null) try { ps.close(); } catch(SQLException ignored) {}
        if (conn != null) try { conn.close(); } catch(SQLException ignored) {}
    }
    
    // 최종 JSON 응답 출력
    out.print(jsonResponse);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
