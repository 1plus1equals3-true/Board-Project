/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.109
 * Generated at: 2025-09-25 04:16:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fproc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.nio.file.*;
import java.sql.*;
import lib.DB;
import lib.MyFileRenamePolicy;

public final class write_005fgallery_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(12);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("lib.MyFileRenamePolicy");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");

String login_id = "";
login_id = (String)session.getAttribute("ss_check");
String ip = java.net.Inet4Address.getLocalHost().getHostAddress();
String fileNames[] = new String[10];
String originalFileNames[] = new String[10];

	Date today = new Date(); // 현재 날짜와 시간 객체 생성
	SimpleDateFormat yearFormat = new SimpleDateFormat("yyyyMMdd"); // 년도 형식 지정
	String ymd = yearFormat.format(today);
	int intymd = Integer.parseInt(ymd);
	
	SimpleDateFormat filetimeFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
	String filetime = filetimeFormat.format(today);

	// 고정 경로
	String path = "D:\\data";
	// 전체 경로
	String dir = path + "\\board" + ymd;
	//디렉토리 생성
	Path directoryPath = Paths.get(dir);
	try {
	    Files.createDirectory(directoryPath);
	
	    System.out.println(directoryPath + " 디렉토리가 생성되었습니다.");
	    
	} catch (FileAlreadyExistsException e) {
	    //System.out.println("디렉토리가 이미 존재합니다");
	} catch (NoSuchFileException e) {
	    System.out.println("디렉토리 경로가 존재하지 않습니다");
	}catch (IOException e) {
	    e.printStackTrace();
	}
	
	int size = 1024 * 1024 * 10; // 파일 사이즈 설정 : 10M
	String fileName = null;    // 업로드한 파일 이름
	String originalFileName = "";    //  서버에 중복된 파일 이름이 존재할 경우 처리하기 위해

	// cos.jar라이브러리 클래스를 가지고 실제 파일을 업로드하는 과정
	MultipartRequest multi = null;
	
	try{
	    // request, 파일저장경로, 용량, 인코딩타입, 중복파일명에 대한 정책
	    multi = new MultipartRequest(request, dir, size, "utf-8", new MyFileRenamePolicy());
	    
	    // 전송한 전체 파일이름들을 가져온다.
	    Enumeration files = multi.getFileNames();
	    
	    int i = 0; // files 순회 번호
	 	// while 반복문을 사용하여 모든 파일 정보를 가져옴
	    while (files.hasMoreElements()) {
	    	
	        String name = (String)files.nextElement();
	        
	        // 서버에 저장된 이름
	        fileName = multi.getFilesystemName(name);
	        
	        // 사용자가 업로드한 원래 파일 이름
	        originalFileName = multi.getOriginalFileName(name);
	        
	        if (fileName != null) {
	        	originalFileNames[i] = originalFileName;
	            fileNames[i] = fileName;
	            i++;
	        }
	    }
    
	}catch(Exception e){
   		e.printStackTrace();
	}

    if (fileNames[0] == null) {
    	dir = null;
    }

String writename = multi.getParameter("writename");
String writepwd = multi.getParameter("writepwd");
String writetitle = multi.getParameter("writetitle");
String writetext = multi.getParameter("writetext");

String sql = "";
Connection conn=null;
Statement st = null;
ResultSet rs = null;
PreparedStatement ps = null;

try {
	conn = DB.getConnection();

		sql = "SELECT name FROM member WHERE uid='"+login_id+"'";
		st = conn.createStatement();
		rs = st.executeQuery(sql);
		rs.next();
		String memname = rs.getString("name");
		rs.close();
		st.close();
		
		sql = "insert into board(title,content,regdate,ip,uid,relativedir,name,boardtype) " +
				   " values(?,?,now(),?,?,?,?,?)";
		
		ps = conn.prepareStatement(sql);

		ps.setString(1, writetitle);
		ps.setString(2, writetext);
		ps.setString(3, ip);
		ps.setString(4, login_id);
		ps.setString(5, dir);
		ps.setString(6, memname);
		ps.setString(7, "3");
	
		ps.executeUpdate();
		
		st = conn.createStatement();
		rs = st.executeQuery("SELECT LAST_INSERT_ID()");
		rs.next();
		String bidx = rs.getString(1);
	
		ps.close();
		
		sql = "insert into board_gallery(bidx,upfile,originalfile,relativedir) " +
				   " values(?,?,?,?)";
		
		for (int i=0; i<10; i++) {
			if (fileNames[i] != null) {
				
				ps = conn.prepareStatement(sql);
				
				ps.setString(1, bidx);
				ps.setString(2, fileNames[i]);
				ps.setString(3, originalFileNames[i]);
				ps.setString(4, dir);
				
				ps.executeUpdate();
				ps.close();
			}
		}
	

		
      out.write(" <script type=\"text/javascript\">\r\n");
      out.write("			location.replace(\"../board/view.jsp?idx=");
      out.print(bidx);
      out.write("\");\r\n");
      out.write("		</script> ");

	 
}catch(Exception e){ 
	  out.println(e.toString());
	  out.println(sql);
}finally {
  	if (ps != null){
		   ps.close();
		}
  	if (rs != null){
		   rs.close();
		}
	if (st != null){
		   st.close();
		}
	if (conn != null){
		   conn.close();
		}
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
