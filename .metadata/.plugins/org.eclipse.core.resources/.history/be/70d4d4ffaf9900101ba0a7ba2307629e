<%@page import="java.awt.PageAttributes.OrientationRequestedType"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.sql.*"%>        
<%@ page import="lib.DB" %>
<%@ page trimDirectiveWhitespaces="true" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>글보기</title>
<style>
*{
	margin: 0 auto;
	padding: 0;
	text-align: center;
	box-sizing: border-box;
}
.view-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
    margin: 20px auto;
    max-width: 800px;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.view-table tr:first-child td {
    background-color: #f8f9fa;
    font-size: 1.2em;
    font-weight: bold;
    padding: 15px;
    text-align: left;
    border-bottom: 2px solid #ced4da;
}

.view-table tr:nth-child(2) td {
    padding: 10px 15px;
    color: #6c757d;
    border-bottom: 1px solid #e9ecef;
}

.view-table tr:nth-child(n) td {
    padding: 10px 15px;
    border-bottom: 1px solid #e9ecef;
}

.view-table tr:nth-child(2) td:not(:last-child) {
    /*border-right: 1px solid #e9ecef;*/
}

.view-table tr:last-child td {
    padding: 20px 15px;
    line-height: 1.6;
    word-break: break-all;
    min-height: 200px;
}

.view-table .text {
    white-space: pre-wrap;
}

.button-group {
    text-align: center;
    margin-top: 20px;
}

.button-group button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin: 0 4px;
}

.button-group .btn-modify {
    background-color: #ffc107;
    color: #343a40;
}

.button-group .btn-modify:hover {
    background-color: #e0a800;
}

.button-group .btn-delete {
    background-color: #dc3545;
    color: white;
}

.button-group .btn-delete:hover {
    background-color: #c82333;
}

.button-group .btn-list {
    background-color: #007bff;
    color: white;
}

.button-group .btn-list:hover {
    background-color: #0056b3;
}

.comment-form {
    display: flex; /* Use flexbox to align items horizontally */
    align-items: center; /* Vertically center the input and button */
    padding: 10px 15px; /* Add some padding, similar to the table cells */
}

.comment-form textarea {
    flex-grow: 1; /* Make the textarea take up the available space */
    margin-right: 10px; /* Add some space between the textarea and the button */
    padding: 8px; /* Padding inside the textarea */
    border: 1px solid #ced4da; /* A subtle border */
    border-radius: 4px; /* Slightly rounded corners */
    font-size: 14px; /* Match the font size of the table */
    resize: vertical; /* Allow vertical resizing, but not horizontal */
    min-height: 50px; /* Give it a minimum height */
    text-align: left;
}

.comment-form button {
    padding: 8px 16px; /* Padding for the button */
    background-color: #007bff; /* Use a primary color, similar to your list button */
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.comment-form button:hover {
    background-color: #0056b3;
}

.delete-button {
    display: inline-block; /* <a> 태그가 패딩과 마진을 가질 수 있도록 블록 요소처럼 동작하게 함 */
    padding: 8px 16px; /* 폼 버튼과 동일한 패딩 */
    background-color: #dc3545; /* 삭제를 의미하는 빨간색 */
    color: white; /* 흰색 글자 */
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-decoration: none; /* 기본 밑줄 제거 */
}

.delete-button:hover {
    background-color: #c82333; /* 마우스를 올렸을 때 더 어두운 빨간색 */
}

.modify-button {
    display: inline-block; /* <a> 태그가 패딩과 마진을 가질 수 있도록 블록 요소처럼 동작하게 함 */
    padding: 8px 16px; /* 폼 버튼과 동일한 패딩 */
    background-color: #ffc107; /* 주황색 */
    color: black; /*  글자 */
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-decoration: none; /* 기본 밑줄 제거 */
}

.modify-button:hover {
    background-color: #e0a800; /* 더 진한 주황색 호버 */
}

.edit-form {
    display: flex;
    align-items: center;
    gap: 10px; /* 요소들 사이에 간격을 줍니다 */
}

.edit-form textarea {
    flex-grow: 1;
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    resize: vertical;
    min-height: 50px;
    text-align: left;
}

.edit-form .btn-submit { /* 수정 버튼 스타일 */
    padding: 8px 16px;
    background-color: #ffc107; /* modify-button 색상과 맞춤 */
    color: black;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.edit-form .btn-cancel { /* 취소 버튼 스타일 */
    padding: 8px 16px;
    background-color: #dc3545; /* delete-button 색상과 맞춤 */
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.view-table img {
width: 200px;
object-fit: contain;
}

.view-table .download {
	display: inline-block; /* 버튼 크기 조정을 위해 인라인 블록으로 설정 */
 	padding: 12px 24px; /* 내부 여백 */
  	border: 1px solid #007bff; /* 테두리 */
  	border-radius: 5px; /* 모서리 둥글게 */
  	background-color: #007bff; /* 배경색 */
  	color: #fff; /* 글자색 */
  	text-decoration: none; /* 밑줄 제거 */
  	font-weight: bold; /* 글자 두껍게 */
  	font-family: Arial, sans-serif; /* 폰트 설정 */
  
  	/* 애니메이션 및 그림자 효과 */
 	transition: all 0.3s ease; /* 모든 속성에 0.3초 동안 부드러운 전환 효과 */
  	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* 미세한 그림자 효과 */
}

.view-table .download:hover {
	background-color: #0056b3; /* 배경색을 조금 더 진하게 */
  	border-color: #0056b3; /* 테두리 색상도 변경 */
  	transform: translateY(-2px); /* Y축으로 살짝 위로 이동하여 입체감 부여 */
  	box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15); /* 그림자도 더 진하게 */
}

.view-table .download:active {
	transform: translateY(0); /* 원래 위치로 돌아오게 하여 누르는 느낌 */
  	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 그림자도 줄여서 누르는 효과 강조 */
}

.view-table .td40 {
	width: 40%;
}

.view-table .td20 {
	width: 20%;
}

</style>
</head>
<body>
<%@ include file="op_top.jsp" %>
<%@ include file="../include/side_nav.jsp" %>
<%
String idx = request.getParameter("idx");

Connection conn=null;
Statement st = null;
PreparedStatement ps = null;
ResultSet rs = null;
 
String sql = null;

String cidx = "";
String comname = "";
String ment = "";
String comdate = "";
String cuid = "";
String boardtype = "";
int temp_rank = -1;

try{
    
   conn = DB.getConnection();

   sql = "SELECT b.* FROM board b where b.idx='"+idx+"'";
   st = conn.createStatement();
   rs = st.executeQuery(sql);
    
  }catch(Exception e){ 
    e.printStackTrace();
    out.println(sql);
}

//--------

if(rs != null){
	rs.next();
	String name = rs.getString("name");
	String title = rs.getString("title");
	String content = rs.getString("content");
	String hit = rs.getString("hit");
	String regdate = rs.getString("regdate");
	String ip = rs.getString("ip");
	String uid = rs.getString("uid");
	String upfile = rs.getString("upfile");
	String originalfile = rs.getString("originalfile");
	boardtype = rs.getString("boardtype");
	
	if (boardtype.equals("3")) {
		response.sendRedirect("../board/view_gallery.jsp?idx="+idx);
		return;
	}
	
	int ihit = Integer.parseInt(hit);
	ihit+=1;
	hit = Integer.toString(ihit);
	
try {
	
	conn = DB.getConnection();
	sql = "update board set hit=? where idx=?";
	ps = conn.prepareStatement(sql);
	ps.setString(1, hit);
	ps.setString(2, idx);
	ps.executeUpdate();
	
}catch(Exception e){ 
	  out.println(e.toString());
	  out.println(sql);
}


	

%>

<% temp_rank = login_rank; %>
<section class="min-height">
<h1>작성 글</h1><br>

<table class="view-table">

	<tr>
		<td colspan="4"><%= title %></td>
	</tr>
	
	<tr>
		<td>작성자 : <%= name %></td>
		<td>작성일자 : <%= regdate %></td>
		<td>조회수 : <%= hit %></td>
		<td>아이피 : <%= ip %></td>
	</tr>
	
	<tr>
		<td colspan="4"><div style="min-height: 200px; text-align: left;"><%= content.replace("\r\n","<br>") %></div></td>
	</tr>
	
	<tr>
		<% if (upfile != null) { %>
			<td>첨부 파일</td>
			<td colspan="3"><p><%= originalfile %></p><br>
				<a href="download.jsp?idx=<%= idx %>" class="download" target="_blank">다운로드</a>
		<% } %>
			</td>
	</tr>
	
</table>

<%
try {
	conn = DB.getConnection();
	sql = " SELECT c.*, m.name as comname from comment c LEFT JOIN member m ON c.uid = m.uid where bidx="+ idx;
	st = conn.createStatement();
	rs = st.executeQuery(sql);
	
}catch(Exception e){ 
    e.printStackTrace();
    out.println(sql);
}
%>

<table class="view-table">

<tr>
	<td colspan="4">댓글</td>
</tr>

<tr>
	<td class="td20">작성자</td>
	<td class="td40">내용</td>
	<td class="td20">작성일자</td>
	<td class="td20"></td>
</tr>

<%
   while (rs.next()) {
      cidx = rs.getString("idx");
      comname = rs.getString("comname");
      ment = rs.getString("ment");
      comdate = rs.getString("regdate");
      cuid = rs.getString("uid");
   
%>
		
	<tr id="row-<%= cidx %>">
	    <td><%= comname %></td>
	    <td id="ment-<%= cidx %>" style="text-align: left;"><%= ment.replace("\r\n","<br>") %></td>
	    <td><%= comdate %></td>
	<% if (cuid != null && cuid.equals(login_id)) { %>
	    <td>
	        <button class="modify-button" onclick="toggleEditRow('<%= cidx %>')">수정</button>
	        <button class="delete-button" data-cidx="<%= cidx %>">삭제</button>
	    </td>
    <% }else { %>
    	<td></td>
    <% } %>
	</tr>

	<tr id="edit-row-<%= cidx %>" style="display:none;">
	    <td><%= comname %></td>
	    <td colspan="3">
	    	<form id="editForm-<%= cidx %>" action="../board_proc/comment_modify.jsp" method="post" class="edit-form">
	    		<input type="hidden" name="idx" value="<%= idx %>">
	    		<input type="hidden" name="cidx" value="<%= cidx %>">
		        <textarea name="commentmodify"><%= ment %></textarea>
		        <button type="submit" class="btn-submit">수정</button>
		        <button type="button" class="btn-cancel" onclick="cancelEdit('<%= cidx %>')">취소</button>
	        </form>
	        
	    </td>
	</tr>

<% } %>

<% if(login_id != null) { %>
<tr>
	<td></td>
	<td colspan="3">
		<form id="comment-write-form" action="../board_proc/comment_proc.jsp" method="post" class="comment-form">
			<input type="hidden" name="bidx" value="<%= idx %>">
			<textarea name="commenttext"></textarea>
			<button type="submit">등록</button>
		</form>
	</td>
</tr>
<% }else{ %>
<tr>
	<td></td>
	<td colspan="3">
		댓글을 작성하려면 로그인하세요.
	</td>
</tr>
<% } %>
</table>

<br>
<div class="button-group">
<% if (boardtype.equals("0")) { 
		if (login_rank == 9) {
			%>
			<button type="button" class="btn-modify" onclick="modify()">수정</button>
			<button type="button" class="btn-delete" onclick="wdelete()">삭제</button>
			<%
		}

}else if (boardtype.equals("1")) {
	if (login_rank == 9 || login_id.equals(uid)) {
		%>
		<button type="button" class="btn-modify" onclick="modify()">수정</button>
		<button type="button" class="btn-delete" onclick="wdelete()">삭제</button>
		<%
	}

}else { 
	%>
	<button type="button" class="btn-modify" onclick="modify()">수정</button>
	<button type="button" class="btn-delete" onclick="wdelete()">삭제</button>
<% } %>
<button type="button" onclick="list_back()" class="btn-list">목록</button>
</div>
</section>
<%@ include file="op_bot.jsp" %>
<%
}

if (rs != null){
   rs.close();
}

if (ps != null){
	   ps.close();
}

if (st != null){
   st.close();
}

if (conn != null){
   conn.close();
}
%>

<script>

//댓글 작성 폼 비동기 처리
document.getElementById('comment-write-form').addEventListener('submit', function(event) {
    // 폼 기본 제출 동작(페이지 리로드) 방지
    event.preventDefault(); 

    const formElement = event.target;
    const commentTextArea = formElement.querySelector('textarea[name="commenttext"]');
    const newCommentText = commentTextArea.value.trim();

    if (newCommentText === "") {
        alert("댓글 내용을 입력해주세요.");
        return;
    }
    
    // 폼 데이터를 URLSearchParams 객체로 변환
    const formData = new FormData(formElement);

    fetch(formElement.action, {
        method: 'POST', 
        body: new URLSearchParams(formData), // x-www-form-urlencoded 형식으로 변환
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('네트워크 응답 오류');
        }
        // 서버에서 JSON 응답 받기
        return response.json(); 
    })
    .then(data => {
        // 서버 응답 처리
        if (data.success) { 
            // 새 댓글을 HTML로 생성
            const newRowHtml = createCommentRow(data); 

            // 테이블에 삽입
            const commentTable = document.querySelector('.view-table:last-of-type tbody');
            const commentFormRow = formElement.closest('tr'); // 댓글 폼이 포함된 <tr> 
            
            // 새 행을 댓글 폼 행 바로 앞에 삽입
            commentFormRow.insertAdjacentHTML('beforebegin', newRowHtml);
            
            // 입력창 초기화
            commentTextArea.value = '';
            
            // alert('댓글이 성공적으로 등록되었습니다.');

        } else {
            alert('댓글 등록 실패: ' + (data.message || '알 수 없는 오류'));
        }
    })
    .catch(error => {
        console.error('Fetch 에러:', error);
        alert('댓글 등록 중 통신 문제가 발생했습니다.');
    });
});

function createCommentRow(commentData) {

    const formattedMent = commentData.ment.replace(/\r?\n/g, '<br>');
    const bidx = document.querySelector('input[name="bidx"]').value; // 게시글 idx
    const login_id = "<%= login_id %>";

    let actionButtons = '';
    // 작성자 ID와 로그인 ID가 같을 경우에만 수정/삭제 버튼 추가
    if (commentData.cuid && commentData.cuid === login_id) {
        actionButtons = `
            <td>
                <button class="modify-button" onclick="toggleEditRow(`+commentData.cidx+`)">수정</button>
                <button class="delete-button" data-cidx="`+commentData.cidx+`">삭제</button>
            </td>
        `;
    } else {
        actionButtons = '<td></td>';
    }


    // 새 댓글 표시
    const newCommentRow = `
        <tr id="row-`+commentData.cidx+`">
            <td>`+commentData.comname+`</td>
            <td id="ment-`+commentData.cidx+`" style="text-align: left;">`+formattedMent+`</td>
            <td>`+commentData.comdate+`</td>
            `+actionButtons+`
        </tr>
    `;

    // 새 댓글 수정 폼 행 (기존 댓글의 ment 값을 사용)
    const editFormRow = `
        <tr id="edit-row-`+commentData.cidx+`" style="display:none;">
            <td>`+commentData.comname+`</td>
            <td colspan="3">
                <form id="editForm-`+commentData.cidx+`" action="../board_proc/comment_modify.jsp" method="post" class="edit-form">
                    <input type="hidden" name="idx" value="`+bidx+`">
                    <input type="hidden" name="cidx" value="`+commentData.cidx+`">
                    <textarea name="commentmodify">`+commentData.ment+`</textarea>
                    <button type="submit" class="btn-submit">수정</button>
                    <button type="button" class="btn-cancel" onclick="cancelEdit(`+commentData.cidx+`)">취소</button>
                </form>
            </td>
        </tr>
    `;

    // 두 행을 합쳐서 반환
    return newCommentRow + editFormRow;
}

// 댓글 수정폼 데이터 받기
//document.querySelectorAll('.edit-form').forEach(form => {
//    form.addEventListener('submit', function(event) {

//submit 이벤트 발생 시
document.addEventListener('submit', function(event) {
    // 이벤트 타겟'.edit-form' 인지 확인
    if (event.target && event.target.matches('.edit-form')) {
    	
        // 폼 submit 비활성화
        event.preventDefault();

        const formElement = event.target;
        const cidx = formElement.querySelector('input[name="cidx"]').value;
        const newCommentText = formElement.querySelector('textarea[name="commentmodify"]').value;
        
        // 폼 데이터 서버로 전송할 형태로 준비
        const formData = new FormData(formElement);

        fetch(formElement.action, {
            method: 'POST', 
            body: new URLSearchParams(formData), 
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('네트워크 응답 오류');
            }
            // 서버에서 JSON 응답 받기
            return response.json(); 
            
        })
        .then(data => {
            // 서버 응답 처리
            if (data.success) { 
            	
                // 화면 업데이트
                const commentDisplayArea = document.getElementById('ment-'+cidx);
                if (commentDisplayArea) {
                    // 댓글 내용을 새 텍스트로 변경
                    const formattedText = newCommentText.replace(/\r?\n/g, '<br>');
                    commentDisplayArea.innerHTML = formattedText;
                }
                
                // 수정 폼 숨기기 및 원래 댓글 행 다시 표시
                // 'edit-row-cidx'숨기고 'row-cidx'보이게
                cancelEdit(cidx); 
                
                //alert('댓글이 성공적으로 수정되었습니다.');
                
            } else {
                alert('댓글 수정 실패: ' + (data.message || '알 수 없는 오류'));
            }
        })
        .catch(error => {
            console.error('Fetch 에러:', error);
            alert('댓글 수정 중 통신 문제가 발생했습니다.');
        });
    }
});


//댓글 토글
function toggleEditRow(cidx) {
    var originalRow = document.getElementById("row-" + cidx);
    var editRow = document.getElementById("edit-row-" + cidx);

    if (originalRow.style.display !== 'none') {
        originalRow.style.display = 'none';
        editRow.style.display = 'table-row'; //
    } else {
        originalRow.style.display = 'table-row';
        editRow.style.display = 'none';
    }
}

//댓글 취소 버튼
function cancelEdit(cidx) {
    var originalRow = document.getElementById("row-" + cidx);
    var editRow = document.getElementById("edit-row-" + cidx);

    originalRow.style.display = 'table-row';
    editRow.style.display = 'none';
}

//댓글 삭제 버튼 비동기 처리
document.addEventListener('click', function(event) {
    // 이벤트 타겟이 'delete-button' 클래스를 가지는지 확인
    if (event.target && event.target.matches('.delete-button')) {
        const deleteButton = event.target;
        const cidx = deleteButton.getAttribute('data-cidx'); // data-cidx 값 가져오기

        if (!cidx) {
            console.error('댓글 ID(cidx)를 찾을 수 없습니다.');
            return;
        }

        // 삭제 확인
        if (!confirm('정말로 이 댓글을 삭제하시겠습니까?')) {
            return;
        }
        
        const deleteUrl = '../board_proc/comment_delete_proc.jsp'; 

        // 비동기 요청 시작
        fetch(deleteUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            // 삭제할 댓글 ID를 서버에 전달
            body: 'cidx=' + encodeURIComponent(cidx)
        })
        .then(response => {
            if (!response.ok) {
                // HTTP 상태 코드가 200-299 범위가 아닌 경우
                throw new Error('네트워크 응답 오류: ' + response.status);
            }
            // 서버에서 JSON 응답 받기 (성공/실패 메시지)
            return response.json(); 
        })
        .then(data => {
            if (data.success) {
                // 삭제 성공 시 UI에서 댓글 행 제거
                const commentRow = document.getElementById('row-' + cidx);
                const editRow = document.getElementById('edit-row-' + cidx);

                if (commentRow) {
                    commentRow.remove();
                }
                if (editRow) {
                    editRow.remove();
                }
                
                //alert('댓글이 성공적으로 삭제되었습니다.');
            } else {
                // 서버에서 'success: false'를 보낸 경우
                alert('댓글 삭제 실패: ' + (data.message || '권한이 없거나 알 수 없는 오류입니다.'));
            }
        })
        .catch(error => {
            console.error('Fetch 에러:', error);
            alert('댓글 삭제 중 통신 문제가 발생했습니다.');
        });
    }
});

//글 목록 버튼
function list_back() {
	var boardtype = "<%= boardtype %>";
	
	if (boardtype == "0") {
		window.location.href = 'list_notice.jsp';
	}else if (boardtype == "1") {
		window.location.href = 'list_member.jsp';
	}else {
		window.location.href = 'list_anonymity.jsp';
	}
}
//글 수정 버튼
function modify() {
	var idx = "<%= idx %>";
	var boardtype = "<%= boardtype %>";
	var login_rank = "<%= temp_rank %>";
	
	if (boardtype == "0") {
		if (login_rank == 9) {
			window.location.href = 'modify.jsp?idx=' + idx;
		}else {
			alert("권한 없음")
			return;
		}
		
	}else if (boardtype == "1") {
		if (login_rank == 9) {
			window.location.href = 'modify.jsp?idx=' + idx;
		}else if (0 <= login_rank && login_rank < 9) {
			let passinput = prompt('비밀번호를 입력하세요');
					if (passinput === null) {
						return;
					} else if (passinput === "") {
						alert("아무것도 입력하지 않았습니다.");
						return;
					} else {
						window.location.href = 'modify_check.jsp?idx=' + idx + "&passinput=" + passinput;
						return;
					}

		}else {
			alert("권한 없음")
			return;
		}
		
	}else {
		if (login_rank == 9) {
			window.location.href = 'modify.jsp?idx=' + idx;
		}else {
			let passinput = prompt('비밀번호를 입력하세요');
			if (passinput === null) {
				return;
			} else if (passinput === "") {
				alert("아무것도 입력하지 않았습니다.");
				return;
			} else {
				window.location.href = 'modify_check.jsp?idx=' + idx + "&passinput=" + passinput + "&type=anony";
				return;
			}
		}
	}
}
//글 삭제 버튼
function wdelete() {
	var idx = "<%= idx %>";
	var boardtype = "<%= boardtype %>";
	var login_rank = "<%= temp_rank %>";
	
	if (boardtype == "0") {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else {
			alert("권한 없음")
			return;
		}
		
	}else if (boardtype == "1") {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else if (0 <= login_rank && login_rank < 9) {
			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');
					if (passinput === null) {
						return;
					} else if (passinput === "") {
						alert("아무것도 입력하지 않았습니다.");
						return;
					} else {
						location.replace("../board_proc/delete_check.jsp?idx=<%= idx %>&passinput="+passinput);
						return;
					}

		}else {
			alert("권한 없음")
			return;
		}
		
	}else {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else {
			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');
			if (passinput === null) {
				return;
			} else if (passinput === "") {
				alert("아무것도 입력하지 않았습니다.");
				return;
			} else {
				location.replace("../board_proc/delete_check.jsp?idx=<%= idx %>&passinput="+passinput+"&type=anony");
				return;
			}
		}
	}
}

//댓글 삭제 버튼
function cdelete() {
	var idx = "<%= idx %>";
	var boardtype = "<%= boardtype %>";
	var login_rank = "<%= temp_rank %>";
	
	if (boardtype == "0") {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else {
			alert("권한 없음")
			return;
		}
		
	}else if (boardtype == "1") {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else if (0 <= login_rank && login_rank < 9) {
			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');
					if (passinput === null) {
						return;
					} else if (passinput === "") {
						alert("아무것도 입력하지 않았습니다.");
						return;
					} else {
						location.replace("../board_proc/delete_check.jsp?idx=<%= idx %>&passinput="+passinput);
						return;
					}

		}else {
			alert("권한 없음")
			return;
		}
		
	}else {
		if (login_rank == 9) {
			var con_del_check = confirm("게시글을 삭제하시겠습니까?");
			if (con_del_check) {
				location.replace("../board_proc/delete_proc.jsp?idx=<%= idx %>");
			}
			
		}else {
			let passinput = prompt('삭제하려면 비밀번호를 입력하세요.');
			if (passinput === null) {
				return;
			} else if (passinput === "") {
				alert("아무것도 입력하지 않았습니다.");
				return;
			} else {
				location.replace("../board_proc/delete_check.jsp?idx=<%= idx %>&passinput="+passinput+"&type=anony");
				return;
			}
		}
	}
}
</script>

</body>
</html>