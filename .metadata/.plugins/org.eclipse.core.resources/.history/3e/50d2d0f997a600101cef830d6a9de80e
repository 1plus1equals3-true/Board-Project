//======================== 전역 상태 관리 ===============================
const MAX_FILES = 10;
let filesToUpload = []; // 새로 업로드할 파일 객체들을 저장할 배열
let fileIndexCounter = 0; // 새로 추가되는 파일에 고유 ID를 부여하기 위한 카운터

// 초기 기존 파일 개수 설정 (JSP의 total_file_count hidden input에서 가져옴)
let initialFileCount = parseInt(document.getElementById('total-file-count').value); 

//===================================================================

document.addEventListener('DOMContentLoaded', function() {
    const fileList = document.getElementById('file-list');
    const actualInput = document.getElementById('file-input-actual');
    const selectButton = document.getElementById('select-file-button');

    // 1. '파일 추가' 버튼 클릭 -> 숨겨진 Input 실행
    selectButton.addEventListener('click', () => {
        // ⭐ 파일 제한 초과 시 선택 방지
        if (getOverallFileCount() >= MAX_FILES) {
            alert(`더 이상 파일을 추가할 수 없습니다. (최대 ${MAX_FILES}개)`);
            return;
        }
        actualInput.click();
    });

    // 2. 실제 Input에 파일이 선택되었을 때
    actualInput.addEventListener('change', (e) => {
        const selectedFiles = Array.from(e.target.files);
        
        // 🚨 Input value를 비워야 다음에 같은 파일을 선택해도 change 이벤트가 발생함
        actualInput.value = ''; 

        selectedFiles.forEach(file => {
            if (getOverallFileCount() < MAX_FILES) {
                // 새로운 파일 객체를 배열에 추가하고 고유 ID 부여
                const fileId = 'new_' + fileIndexCounter++;
                filesToUpload.push({ id: fileId, file: file });
                
                // UI에 목록 추가
                renderNewFileItem(file.name, fileId);
                
            } else {
                alert(`"${file.name}" 파일을 제외하고 처리되었습니다. (최대 ${MAX_FILES}개)`);
            }
        });
        
        updateFileCountDisplay();
    });

    // 3. 파일 목록 전체에 대한 삭제 이벤트 위임
    fileList.addEventListener('click', (e) => {
        if (!e.target.classList.contains('delete-btn')) return;

        const button = e.target;
        const type = button.dataset.type;
        const fileId = button.dataset.fileId;
        const fileItem = button.closest('.file-item');

        if (!confirm("이 파일을 삭제하시겠습니까?")) return;

        if (type === 'existing') {
            // A. 기존 파일 삭제 처리
            const deletedInput = document.getElementById('deleted-file-ids-input');
            deletedInput.value += (deletedInput.value ? ',' : '') + fileId;
            
            // ⭐ keep_file hidden input 제거 (서버에서 유지할 파일 목록에서 제외)
            fileItem.querySelector(`input[name="keep_file_${fileId}"]`).remove();
            
        } else if (type === 'new') {
            // B. 새로 선택한 임시 파일 삭제 처리
            filesToUpload = filesToUpload.filter(item => item.id !== fileId);
        }

        // UI에서 제거
        fileItem.remove();
        updateFileCountDisplay();
    });
    
    // 4. Submit 시 파일 객체를 최종 Input에 담는 처리 (매우 중요)
    document.forms['modify_form'].addEventListener('submit', (e) => {
        // filesToUpload 배열에 있는 파일 객체들을 실제 input[type=file]에 할당
        const dataTransfer = new DataTransfer();
        filesToUpload.forEach(item => {
            dataTransfer.items.add(item.file);
        });
        actualInput.files = dataTransfer.files;

        if (getOverallFileCount() === 0) {
             alert("하나 이상의 파일을 업로드하거나 기존 파일을 유지해야 합니다.");
             e.preventDefault(); // 파일이 없으면 전송 방지
        }
    });

    // 초기 파일 카운트 업데이트
    updateFileCountDisplay();
});

//======================== 헬퍼 함수 ===============================

// 현재 총 파일 개수 계산 함수 (기존 파일 + 임시 파일)
function getOverallFileCount() {
    // #file-list의 모든 .file-item 개수를 세는 것이 가장 정확함
    return document.querySelectorAll('#file-list .file-item').length;
}

// UI에 새로운 파일 항목을 추가하는 함수
function renderNewFileItem(fileName, fileId) {
    const li = document.createElement('li');
    li.className = 'file-item new';
    li.dataset.fileId = fileId;
    li.innerHTML = `
        <span class="file-name-display">새 파일 : ${fileName}</span>
        <button type="button" class="delete-btn" data-type="new" data-file-id="${fileId}">❌</button>
    `;
    document.getElementById('file-list').appendChild(li);
}

// 파일 개수 표시를 업데이트하는 함수
function updateFileCountDisplay() {
    const count = getOverallFileCount();
    document.getElementById('current-file-count').textContent = count;
    
    const selectButton = document.getElementById('select-file-button');
    if (count >= MAX_FILES) {
        selectButton.disabled = true;
        selectButton.textContent = '파일 추가 (최대 개수 도달)';
    } else {
        selectButton.disabled = false;
        selectButton.textContent = '파일 추가';
    }
}


function gallery_modify_submit() {
    const form = document.forms['modify_form'];

    if (form) {
        form.submit();
    }
}