<%@page import="java.util.Enumeration"%>
<%@page import="com.oreilly.servlet.multipart.DefaultFileRenamePolicy"%>
<%@page import="com.oreilly.servlet.MultipartRequest"%>
<%@page import="java.io.File"%>
<%@ page import="java.util.Date" %>
<%@ page import="java.text.SimpleDateFormat" %>
<%@ page import="java.io.IOException"%>
<%@ page import="java.nio.file.*"%>

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.sql.*" %>
<%@ page import="lib.DB" %>
<%@ page import="lib.MyFileRenamePolicy" %>
<%@ page import="java.util.ArrayList" %>
<%@ page import="java.util.List" %>
    
<%
// ========================================================
// 1. 초기 설정 및 변수 준비
// ========================================================
String ip = java.net.Inet4Address.getLocalHost().getHostAddress();
String fileNames[] = new String[10]; // 서버 저장 파일명
String originalFileNames[] = new String[10]; // 원본 파일명

// 파일 업로드는 게시글의 기존 경로를 찾아서 처리할 것임
String dir = null; // 실제 파일이 저장될 기존 경로를 담을 변수

int size = 1024 * 1024 * 10; // 10M
String fileName = null;
String originalFileName = "";

// JDBC 변수
Connection conn = null;
Statement st = null;
ResultSet rs = null;
PreparedStatement ps = null;

MultipartRequest multi = null; 
String idx = null;
boolean transactionSuccess = false;

try {
    // DB 연결 및 트랜잭션 시작
    conn = DB.getConnection();
    conn.setAutoCommit(false); 

    // ========================================================
    // 2. 게시글 idx 수신 및 기존 경로 조회 (가장 먼저 처리)
    // ========================================================
    // MultipartRequest를 사용하기 전에 idx를 얻습니다.
    String tempDir = "D:\\data"; 

// 2-1. 임시 MultipartRequest 생성
multi = new MultipartRequest(request, tempDir, size, "utf-8", new MyFileRenamePolicy());

// 2-2. multi 객체에서 idx 값을 가져옴! (이제 값을 읽을 수 있음)
idx = multi.getParameter("idx");

if (idx == null || idx.isEmpty()) {
    // 롤백은 파일 처리가 없으므로 필요 없음
    throw new Exception("게시글 번호가 유효하지 않습니다.");
}
    
    // 2-1. 기존 파일 저장 경로(relativedir) 조회
    String sql_select_dir = "SELECT relativedir FROM board WHERE idx = ?";
    ps = conn.prepareStatement(sql_select_dir);
    ps.setString(1, idx);
    rs = ps.executeQuery();
    
    if (rs.next()) {
        dir = rs.getString("relativedir");
    }
    rs.close(); ps.close();

    if (dir == null || dir.isEmpty()) {
        // 기존 게시글에 파일 경로 정보가 없다면 (파일 업로드가 불가능)
        // 이 부분은 작성 시점의 DB 설계 및 로직에 따라 유연하게 대처해야 합니다.
        // 현재는 필수 정보로 간주하고 오류 처리합니다.
        throw new Exception("기존 파일 저장 경로를 찾을 수 없습니다. (relativedir 없음)");
    }

    // ========================================================
    // 3. MultipartRequest 생성 (조회된 dir 경로 사용)
    // ========================================================
    multi = new MultipartRequest(request, dir, size, "utf-8", new MyFileRenamePolicy());
    
    // 3-1. 전송한 새 파일 이름들을 배열에 저장
    Enumeration files = multi.getFileNames();
    
    int i = 0;
    while (files.hasMoreElements()) {
    	
        String name = (String)files.nextElement();
        
        // 서버에 저장된 이름
        fileName = multi.getFilesystemName(name);
        
        // 사용자가 업로드한 원래 파일 이름
        originalFileName = multi.getOriginalFileName(name);
        
        if (fileName != null) {
        	originalFileNames[i] = originalFileName;
            fileNames[i] = fileName;
            i++;
        }
    }

    // 3-2. 폼 데이터 수신 (MultipartRequest 객체에서 가져옴)
    String writetitle = multi.getParameter("writetitle");
    String writetext = multi.getParameter("writetext");
    String deletedFileOrders = multi.getParameter("deleted_file_ids"); // 삭제할 기존 파일 ID (file_order 값)
    
    // ========================================================
    // 4. 기존 파일 삭제 처리 (deleted_file_ids 기준)
    // ========================================================
    if (deletedFileOrders != null && !deletedFileOrders.isEmpty()) {
        String[] ordersToDelete = deletedFileOrders.split(",");
        
        // 4-1. 삭제할 파일의 savedfile 이름을 DB에서 조회
        StringBuilder inClause = new StringBuilder();
        for (int j = 0; j < ordersToDelete.length; j++) {
            inClause.append("?");
            if (j < ordersToDelete.length - 1) inClause.append(",");
        }
        
        String sql_select_del_files = 
            "SELECT savedfile FROM board_gallery WHERE bidx = ? AND file_order IN (" + inClause.toString() + ")";
        
        ps = conn.prepareStatement(sql_select_del_files);
        ps.setString(1, idx);
        for (int j = 0; j < ordersToDelete.length; j++) {
            ps.setInt(j + 2, Integer.parseInt(ordersToDelete[j]));
        }
        rs = ps.executeQuery();
        
        List<String> filesToDelete = new ArrayList<>(); 
        while(rs.next()) {
            filesToDelete.add(rs.getString("savedfile"));
        }
        rs.close(); ps.close();

        // 4-2. DB에서 해당 파일 레코드 삭제
        String sql_delete = 
            "DELETE FROM board_gallery WHERE bidx = ? AND file_order IN (" + inClause.toString() + ")";
        ps = conn.prepareStatement(sql_delete);
        ps.setString(1, idx);
        for (int j = 0; j < ordersToDelete.length; j++) {
            ps.setInt(j + 2, Integer.parseInt(ordersToDelete[j]));
        }
        ps.executeUpdate();
        ps.close();
        
        // 4-3. 서버 저장소에서 실제 파일 삭제 (dir 변수 = 기존 경로)
        for (String savedFile : filesToDelete) {
            if (savedFile != null) {
                File file = new File(dir, savedFile); 
                if (file.exists()) {
                    file.delete();
                }
            }
        }
    }

    // ========================================================
    // 5. 게시글 내용 업데이트
    // ========================================================
    String sql_update_board = "UPDATE board SET title = ?, content = ?, ip = ? WHERE idx = ?";
    ps = conn.prepareStatement(sql_update_board);
    ps.setString(1, writetitle);
    ps.setString(2, writetext);
    ps.setString(3, ip); 
    ps.setString(4, idx);
    ps.executeUpdate();
    ps.close();

    // ========================================================
    // 6. 새로운 파일 업로드 처리
    // ========================================================
    
    // 6-1. 기존 파일 중 남아있는 파일의 file_order 최대값을 조회
    String sql_max_order = "SELECT COALESCE(MAX(file_order), -1) FROM board_gallery WHERE bidx = ?";
    ps = conn.prepareStatement(sql_max_order);
    ps.setString(1, idx);
    rs = ps.executeQuery();
    int maxOrder = -1;
    if (rs.next()) {
        maxOrder = rs.getInt(1);
    }
    rs.close(); ps.close();
    
    int currentOrder = maxOrder + 1; // 새로운 파일은 MAX + 1부터 시작
    
    // 6-2. 새로운 파일들 DB에 INSERT
    String sql_insert_gallery = "insert into board_gallery(bidx, upfile, originalfile, relativedir, file_order) " +
           " values(?,?,?,?,?)";
    
    for (int j = 0; j < fileNames.length; j++) {
        if (fileNames[j] != null) {
            
            ps = conn.prepareStatement(sql_insert_gallery);
            
            ps.setString(1, idx);
            ps.setString(2, fileNames[j]);
            ps.setString(3, originalFileNames[j]);
            ps.setString(4, dir); // *** 기존 경로 사용 ***
            ps.setInt(5, currentOrder++);
            
            ps.executeUpdate();
            ps.close();
        }
    }
    
    // ========================================================
    // 7. 트랜잭션 커밋 및 완료
    // ========================================================
    conn.commit();
    transactionSuccess = true;
	 
}catch(Exception e){ 
	  if (conn != null) conn.rollback();
	  out.println("<script>alert('게시글 수정 중 오류가 발생했습니다.\\n" + e.getMessage().replace("'", "\\'") + "'); history.back();</script>");
}finally {
    // DB 연결 종료
    if (ps != null) ps.close();
    if (rs != null) rs.close();
    if (st != null) st.close();
    if (conn != null) conn.close();
}

// 최종 리다이렉션
if (transactionSuccess) {
    %> <script type="text/javascript">
        location.replace("view.jsp?idx=<%=idx%>");
    </script> <%
}
%>